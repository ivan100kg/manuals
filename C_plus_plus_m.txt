// C++

дерективы препроцессора:
	Деректива - прямой приказ процессору. 
	01 D8 - команда процессору, взять eax прибавить ebx поместить результаты
	в eax. Nasm: add eax, ebx. То же самое.

	#include <...> - подключение библиотек
	#define MAX - определить константу/макрос
	#define MAX 100 - сразу присвоить макросу значение - может быть всем чем уг
	#ifdef MAX  - если существует
	#ifndef MAX - если не существуют
	#if MAX < 200 - если истина
	#elif MAX > 200 - если также истина
	#else  - иначе
	#endif - конец

типы данных:
	short(2), int(4), long(8), long long(8)	# целочисленные
	float(4), double(8), long double(16)	# с плав точкой
	char = 'r';
	bool = true;
	int a, b = 0;
	double d = 10.66;
	float f = 10.5f;


константы:
	const int A = 10;

русская локаль:
	setlocale(LC_ALL, "Rus"); -ASCII после 127 символа - кириллица

ввод-вывод текста:
	printf("hello %s\n", "world"); %s - строки, %d - int, %f - float/double
	cout << "Hello" << endl;
	cin >> x;

операторы:
	+ - * . %		// арифметические
	= += -= *= /=	// присваивания
	== != < > <= >=	// сравнения
	&& || !			// логические
	++ --			// инкремент/декремент
	& | ^ ~ << >>	// побитовые
	? :				// тернарный
	
ветвление:
	if(true){...}
	else if(...){...}
	else{...}
	
	switch(x)  - если x-int то case-int, можно другие типы данных.
	{
		case 1:
			...
			break;
		case 2:
			...
			break;
		default:
			...
			break;
	}

тернарный оператор:
	истина ? да : нет; -если истина - 1, если ложь - 2.
	x = y ? cout << "yes" : cout << "no"; 

циклы:
	while(true){...}		# while
	do{...}while(true);		# do while
	for(int i = 0; i<10;i++){...}	# for
	break;				# прервыть цикл, выход из цикла
	continue;			# прервать цикл, начать с новой итерации
	
встроенные ф-ии:
	sizeof(int); - размер в байтах чего либо
	
рандом:
	srand(time(0));  - принимает int для разной генерации чисел 0-32767
					 - time(0) - время в сек с 1970 г.
	rand();	         - генератор 0-32767
	rand() % 10 + 1; - от 1 до 11(не включительно)
	
функции:
	void func(int a, int b = 100); - прототип. Реализация после main().
	double func(float c); - перегруженная ф-я (с таким же наз-ием)
	double (*foo)(float c) = func; - указатель на функцию выше
	void foo2(double (*foo)()); - в параметрах указатель на ф-ю void без парам

шаблоны:
	template <class T>   - шаблон ф-ии принимает 2 одинаковых типа данных
	T Sum(T a, T b){...}   чтобы не перегружать функции

указатели:
	int a = 1;
	int* ptr_a = &a; 	// указатель(*) типа инт хранит адрес(&) перем-й типа инт.
	*ptr_a				// с помощью разименования получим значение переменной

ссылки:
	int a = 1;
	int& ref_a = a;		// ссылка не хранит адрес в памяти, а является псевдонимом
	ref_a				// всегда остается ссылкой на искомую переменную
	
динамическая память:
	int *a = new int; - выделение памяти в оперативке  за пределами программы
	delete a; -освобождение памяти
	a = nullptr; или a = NULL; или а = 0; -подтираем указатель	
	
массивы статические:
	int arr[10];
	int arr[10][20]{}; - двумерный + все члены иниц нулями {}

динамические массивы:
	int *arr = new int[10];	-объявление и выделение
	delete[] arr; -освобождение

строки:
	char *str = "hello";
	char str[] = "hello";
	char str[] = {'h','e','l','l','o','/0'}; - детерминирующий ноль обязателен
	strint str = "Hello"; - C++
	string str2 = str + "world"; - конкатенация
	
аргументы ком строки
	int main(int argc, char *argv[])
	arguments count - число аргументов - int args
	arguments values - Значения - char *argv[] - массив строк
	

=== ООП ======================================================================
класс:
	class Animal{
		Animal(){};  - конструктор по умолчанию
		Animal(int age){}; -перегрузка конструктора
		~Animal(){}; -деструктор по умолчанию
		int age;	 - поле
		void Get_age(){}; - метод
	};
	
объект:
	Animal dog();
	
модификаторы доступа:
	public:	   -открытые 
	private:   -закрытые
	protected: -закрытые, открыты только для классов наследников в 
                реализации класса
	
конструктор:
	вызывается при создании объекта
	Animal(){}; - не имеет возвращ знач, можно перегружать

деструктор:
	вызывается при удалении объекта(не исполь-ия в дальнейшем/потери связи)
	удобно чистить динамич память 	
	~Animal(){ delete[] arr}; - не имеет аргументов.

указатель this:
	this используется внутри релизации класса и его методов/переменных
	this это как бы объект класса, который в данный момент работает
	this->age = age
	
конструктор копирования:
	вызывается когда объекту класса присваивается объект класса.
	Animal a(b); либо Animal a = b. Но не a = b - это присваивание, вызывается
	    ф-ия перегруж оператора '=' присваивания.
	Animal(const Animal &other){ -по умолчанию копирует побитово все данные
		this.data = other.data;  но в случае динамических данных будет ошибка в 
	}							 деструкторе при очистке памяти(вып-ся дважды)
	Animal(const Animal &other){ -перегрузка констр копирования, в том случ
		this->data = new int[other.Size];  если есть дин пам, выделяем память
		for....копируем все по элементно                                 вручную.
	}

перегрузка операторов:
	'= += -= *= /= %=' присваивание
		Animal& operator= (const Animal & other){}
			вы зывается так a.operator=(b) или а = b
			здесь же выполяем delete если есть дин память, чтоб не затереть
			
	'== != > < >= <=' булевые
		bool operator ==(const Animal & other){return this->data == other.data}
		для всех операций схожий код
		
	'++ --' инкремент декремент
		// ++ префикс
		MyClass& operator ++() {
			this->age++;
			return *this;
		}
		// ++ постфикс
		MyClass& operator ++(int a) { // да такой синтаксис 'а' не исп-ся
			MyClass temp(*this); // копия объекта
			this->age++;
			return temp;;
		}
	'[]' скобки
		int& operator[](int index) {
		return arr[index];
	}
	
дружественные функции:
	может обращаться к закрытым членам класса
	в классе объявляется прототип ф-ии со словом friend
	реализация функции вне класса
		friend void show(); // в классе
			void show(A& object) { // вне класса - реализация
				object.age++;
			}

дружественные методы:
	внутри класса объявляется друж метод - он имеет доступ к private через объект
	friend void B::TakeVar(B& b); // прототип в классе А
	void TakeVar(B& b) // реализация в классе B 
	{
		cout << b.num << endl;
	}

дружественный класс:
	если в классе B написать friend A, то класс А получит доступ ко всем полям
	и методам класса B. Реализация функции только в A.
	в классе А:
	int GetNibhn(B& b) { получаем доступ напрямую через ссылку на объект
		return b.var;
	}
	в классе B:
	friend A;
	
статические поля:
	общие для все объектов, доступ с пом объектов или класса A::
	в классе:
		static int num;
	инициализация после класса!
		int A::num = 0;
		
статические методы:
	методы работающие только со static полями, имеют доступ к private.
	static int GetVar(){}
	в статических методах this не работает.
	
наследование:
	наследуется все от родительского класса
	класс имя : спецификатор родитель
	class A : public B{};
	спецификаторы при наследовании:
		public    - public поле - доступны как в классе так и на уровне объекта
			      - private поле - нет доступа нигде
			      - protected поле - нет дост на ур объекта, но в классе есть!
		private   - закрыты все методы и поля везде
		protedted - так как public, только public=protected
	конструктор наследника вызывает по умолчанию конструктор по умолчанию базы
	можно переопределить если много конструкторов так:
		B():A("параметры для перег-го конст-ра"){}
		B(int a):A(a){} или так

Виртуальные методы:
    Могут переопредиляться наследниками. Сигнатура должна быть одинаковая.
    virtual void func(){}; - в базовом классе
    void func(){} override; - в наследнике.
    Указатель базового класса может указывать как на объект своего же класса так
	и на классы наследники!
	
    Например класс оружие с виртуальным методом shoot() и у него куча классов
	наследников. Допустим создаём класс player и определяем у него метод который
	принимает указатель на класс оружие, базовый для всех других, в итоге игроку
	можно передавать любой класс наследник со своим переопределения методом
	shoot ().
	
Вызов virtual метода базового класса:
    Вызывается из класса наследника так.
    ::А::func();

Абстрактный класс:
    Класс в котором есть чисто виртуальные функции без реализации, хотя бы одна!
	Но могут быть и другие данные. Нельзя создать объект абстрактного класса.
    virtual void shoot() = 0; чисто виртуальные функции.
    В классах наследники чисто виртуальные функции должны быть переопределены.

При выделении динамической памяти, в наследуемом классе, необходимо создать
 виртуальный деструктор. И переопределить в наследниках, чтобы освободить
 память. При создании чисто виртуального деструктора, его реализацию выносят за
 класс:
    А::~А(){}; вот так без всего, да такой синтаксис.

Делегирование конструкторов:
    Переопределение конструкторов, которые вызывают и передают данные другим
	конструкторам.
    A()
    {var = 0;
     num = 0;}
    A(int var):A()
    {this.var = var;}
    Это нужно для того чтобы не повторяться и если что-то менять то менять
	не везде.

Множественное наследование:
    Класс может быть наследником сразу у нескольких классов и принимать их методы.
    class C : public A, public B{};
    Конструкторы вызываются по порядку А Б Ц.
    Деструкторы вызываются в обратном порядке.
    Если есть в предках одинаковые названия методов то вызвать можно так:
        (а(В)).func(); приведение типа под конкретного родителя.
    

Интерфейсы.
    Это абстрактные классы у которого все методы - виртуальные.

Ромбовидное/виртуальное наследование. 
    При множественном наследовании может возникнуть проблема, если 2 класса
	предка являются в свою очередь потомками одного класса, то дабы не вызывался
	базовый конструктор дважды, в одном из наследников ставят так:
    class A
    class B: public virtual A
    class C: public A
    class my: public B, public C
    
	
Работа с файлами:
    #include <fstream>
    ofstream - запись в файл
    ifstream - чтение
    ofstream f;
    f.open("my.txt"); - открыть файл для записи
        ofstream::app -параметр для дозаписи
    f << "my text"; - запись в файл
    f.close(); - закрыть файл
    ifstream f;
    f.open("my.txt");
    f.isopen(); - проверка открыт ли файл
    char ch;
    f.get(ch); - считывает по байтно по символу, завернуть в цикл. Помешает
		символ в ch, возвращает true если считалось, false - конец файла.
    f.getline() построчно или std::getline()
    f >> myvar - по слову.

#include <windows.h>
SetConsoleCP(1252); мира кодировки консоли для ввода данных на русском, затем следует переключит обратно на 866.

Запись объектов в файл:
    f.write((char*)& object, sizeof(object class))
    Привести объект к типу массив вам, чтобы записать побайтово, и размер.
    Считывать так же, только read()

Fstream
    fstream fs(open("myfile"), fstream::in | fstream::out | fstream::app)
    Объект fstream имеет возможность работать в режиме добавить, считать, открыть или ещё что-то, через побитовое или.

Перегрузка операторов ввода вывода.
    istream ostream это базовые классы для всех остальных, включая cout cin.
    ostream& operator<<(ostream & os, const Myclacc & object)
    {
        os << object.somedata;
        return os;
    }
    Теперь наш объект можно использовать для вывода в консоль с сиаута так и для вывода в файл.
    istream & operator >> все тоже самое.
    Делам эти функции дружественные и все.


Обработка исключений:
    Try проверямы код, ктч ловит исключения. Именно для проверки файлов используют
        fin.exceptions(idstream::badbit | idstream::failbit);
    try
    {
        f.open(...);
    }
    catch(const exception & ex)
    {
        ex.what()
    }
	catch(...)
	{Ловит все}
	Блоков catch может быть много.

	Можно написать свой класс наследовать exception и добавить что то. Бросать throw и ловить catch. 


Throw:
    Бросает исключения, можно писать свои собственные. Например
        throw istream::failure или throw 22; В него можно бросить все что угодно. Далее блоком try catch ловим именно тот тип который указали в throw. catch(const int ex). 
    Но предпочтительнее бросать exception ("свой текст"); И ловить его в catch(const exception & ex). В методах ex будут полезные методы.
	

Enum:
    Перечисление. Целочисленные константы.
    enum day{mon, tue, win}; 
    day var = mon;
    Переменные типа enum могут принимать одно из его значений day::mon например.
    Это удобно когда есть несколько константных значений. Присваивается по порядку с нуля. Но можно присваивать любые значения. Типа enum speed{,min=40, max=50};


Пространства имён:
    namespace hui
    {
        void foo();
    }
    hui::foo();
    Можно вкладвать а::б::фу();
	
Шаблонные классы:
    Нужны для работы с разными типами данных.
    template <typedef T> или <class T> 
    Myclass
    {T value;}
    При создании объекта нужно указать тип
        Myclass<int> obj;
    Можно создавать много типов.
        template<class T1, class T2> 
        При создании Myclass<int, float> obj;
    Типы могут быть любые, хоть свои классы.



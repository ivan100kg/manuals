Angular

Node.js                     - это среда времени выполнения JavaScript, которая позволяет запускать JavaScript на сервере. 
                              Он позволяет создавать серверные приложения с использованием JavaScript.
NPM (Node Package Manager)  - это менеджер пакетов для JavaScript, который позволяет управлять зависимостями 
                              проекта, устанавливать различные пакеты, выполнять скрипты и многое другое.
TSC (TypeScript Compiler)   - это компилятор TypeScript, который преобразует файлы TypeScript в файлы JavaScript. 
TypeScript                  - это язык программирования, который расширяет функциональность JavaScript, 
                              добавляя статическую типизацию.
Angular                     - фреймворк от Google для создания клиентских приложений 
                              нацелен на разработку SPA-решений (Single Page Application)
                              использует TypeScript в качестве основного языка
AngularJS                   - старый фрейм от которого произошел Angular
Angular CLI                 - пакет npm, упрощает создание приложения, его компиляцию


=== Настройка проекта ========================================================================
npm install -g @angular/cli # установка, установка новой версии Angular CLI
ng version                  # версия Angular CLI
ng update                   # обновить Angular CLI
cd myProject                # перейти в папку где будет содержаться проект
vim package.json            # создать файл с конфигурацией, установка зависимостей, пакетов..
npm install                 # установка всех необходимых модулей из package.json
mkdir -p src/app            # создадим каталоги для исходников
vim app.component.ts        # создать компонент, как минимум 1 на проект
cd ../                      # перейдем в src
vim main.ts                 # создать файл для запуска приложения
vim index.html              # создать собственно саму страничка
vim tsconfig.json           # создать конфиг файл для TypeScript
vim angular.json            # создать конфиг файл для Angular CLI
ng serve --open             # запуск приложения на тестовом сервере
ng build                    # компиляция проекта в dist/helloapp - файлы для любого веб-сервера

--- Иерархия ---
.                           # корневая дир проекта "helloapp"
├── .angular                # служебные файлы 
├── dist                    # релизная директория(после ng build)
├── node_modules            # дир со всеми пакетами и зависимостями(после npm install)
├── angular.json            # конфиг для Angular CLI
├── package.json            # конфиг проекта - пакеты, зависимости, команды(для npm install)
├── package-lock.json       # служебный файл
├── tsconfig.json           # конфиг компилятора TypeScript
└── src                     # исходный код
    ├── app                 # дир компонентов
    │   └── app.comp.ts     # компонент программы
    ├── index.html          # страница на которой крутится приложение
    └── main.ts             # точка входа в программу/запуск программы

--- package.json ---
{
  "name": "helloapp",
  "version": "1.0.0",
  "description": "First Angular 17 Project",
  "author": "Eugene Popov metanit.com",
  "scripts": {                      -- используемые команды
    "ng": "ng",
    "start": "ng serve",            -- веб сервер для тестирования
    "build": "ng build"             -- компилирует приложение
  },
  "dependencies": {                 -- пакеты angular, которые необходимы приложению для работы
    "@angular/common": "~17.0.0",
    "@angular/compiler": "~17.0.0",
    "@angular/core": "~17.0.0",
    "@angular/forms": "~17.0.0",
    "@angular/platform-browser": "~17.0.0",
    "@angular/platform-browser-dynamic": "~17.0.0",
    "@angular/router": "~17.0.0",
    "rxjs": "~7.8.0",
    "zone.js": "~0.14.2"
  },
  "devDependencies": {              -- пакеты, которые будут использоваться для разработки
    "@angular-devkit/build-angular": "~17.0.0",
    "@angular/cli": "~17.0.0",
    "@angular/compiler-cli": "~17.0.0",
    "typescript": "~5.2.2"
  }
}

--- tsconfig.json ---
{
  "compileOnSave": false,
  "compilerOptions": {              -- параметры компиляции
    "baseUrl": "./",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "ES2022",
    "moduleResolution": "node",
    "target": "ES2022",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "ES2022",
      "dom"
    ]
  },
    "files": [ "src/main.ts" ],     -- компилируемый файл, подтягивающий все остальные
    "include": [ "src/**/*.d.ts"]
}

--- angular.json ---
{
  "version": 1,                     -- версия конфигурации 
  "projects": {                     -- нстройки для каждого проекта
    "helloapp": {                   -- настройки нашего проекта
      "projectType": "application", -- application - приложение можно запускать в браузере
      "root": "",                   -- корневыая папка проекта "" - раб каталог совпадает
      "sourceRoot": "src",          -- исходники
      "architect": {                -- настройки для построения проекта
        "build": {                  -- сборка
          "builder": "@angular-devkit/build-angular:browser",       -- сборщик пакетов webpack
          "options": {
            "outputPath": "dist/helloapp",  -- путь, по которому будет публиковаться скомп приложение
            "index": "src/index.html",      -- путь к главной странице приложения
            "main": "src/main.ts",          -- путь к главному файлу приложения, где собственно запускается приложение Angular
            "polyfills": ["zone.js"],       -- путь к файлам полифилов, в качестке которого выступает "zone.js"
            "tsConfig": "tsconfig.json",    -- путь к файлу конфигурации TypeScript
            "aot": true                     -- предварительная компиляция перед выполнением
          },
          "configurations": {               -- доп конфиг проекта
            "production": {                 -- прод [запуск ng build --configuration production]
              "optimization": true,         -- оптимизация
              "outputHashing": "all",       -- в название генерируемого файла добавляться хеш-значение(all - для всех файлов)
              "sourceMap": false,           -- будут ли генерироваться файлы sourceMap
              "namedChunks": false,         -- имена файлов для именнованных подгружаемых чанков
              "vendorChunk": false,         -- отдельный файл для сторонних используемых в приложении библиотек
              "buildOptimizer": true        -- для оптимизации при использовании опции aot
            },
            "development": {                -- разработка [запуск ng build --configuration development]
              "optimization": false,
              "sourceMap": true
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",    -- запуск веб-сервера и развертывание на нем скомп прилож
          "options": {
            "buildTarget": "helloapp:build"
          }
        }
      }
    }
  }
}

--- app.component.ts ---
import { Component } from "@angular/core";      // импорт модуля для исп-я декоратора @Component
import {FormsModule} from "@angular/forms";     // модул для работы с полями ввода
     
@Component({                                    // функция-декоратор @Component, которая ассоц метаданные с классом компонента AppComponent
    selector: "my-app",                         // определяет на странице HTML элемент <my-app> в него будет загружаться приложение Angular
    standalone: true,                           // независимый компонент, создание доп модулей не требуется(использовать по умолчанию)
    imports: [FormsModule],                     // импорт модуля FormsModule для использования поля ввода
    template: `<label>Введите имя:</label>      // визуальная часть компонента, которая отображается в браузере(HTML + код angular)
                 <input [(ngModel)]="name" placeholder="name">      // поле ввода в модель 'name'
                 <h1>Добро пожаловать {{name}}!</h1>`               // вывод значения модели 'name'
    templateUrl:                                // можно вынести в отдельный внешний файл с разметкой html
})
export class AppComponent {                     // экспорт класса в котором определена name с пустым значением
    name= "";                                   // с пустым значением
}

--- main.ts ---
// запускает приложение в виде ранее определенного компонента AppComponent
// при возникновении ошибок они выводятся на консоль
import { bootstrapApplication } from "@angular/platform-browser";
import { AppComponent } from "./app/app.components";
bootstrapApplication(AppComponent).catch(e => console.error(e));            // возвращает promice
// как вариант последнюю строку можно представить так
const appRef: ApplicationRef = await bootstrapApplication(AppComponent);    // можно вот так, это и есть приложение

--- index.html ---
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>METANIT.COM</title>
</head>
<body>
    <my-app>Загрузка...</my-app>    -- сюда загружается приложение
</body>
</html>


=== basic ========================================================================================================
--- Компоненты ---
Компонент управляет отображением представления на экране

# src/app/app.component.ts
import { Component } from "@angular/core";
      
@Component({
    selector: "my-app",
    standalone: true,
    template: "<h1>Hello World!</h1>"
})
export class AppComponent {}            // экспорт класса, чтобы его можно было использовать вне --+
                                                                                                   |
# src/main.ts                                                                                      |
import { bootstrapApplication } from '@angular/platform-browser';                                  |
import { AppComponent } from './app/app.component';                 // импорт нашего класса <------+
bootstrapApplication(AppComponent).catch(e => console.error(e));    // запускает экземпляр приложения Angular 
                            |                                          и отображает автономный компонент в качестве 
                            +---------------+                          корневого компонента приложения
# src/index.html                            |
<!DOCTYPE html>                             |
<html>                                      |
<head>                                      |
    <meta charset="utf-8" />                |
    <title>Hello METANIT.COM</title>        |
</head>                                     |
<body>                                      |
    <my-app>Загрузка...</my-app>    <-------+   отображение компонента на странице
</body>
</html>

--- Модули ---
Другой подход(устаревший не рекомендуемый), который применялся до Angular 16
Модуль служит для объед неск компонентов, которые предназнач для вып-я какой-то общей задачи, в одно целое. 
Приложение Angular может состоять из нескольких модулей. 
В этом случае один модуль является корневым или главным (root module). 
Сначала загружается главный модуль, Согласно условностям, он обычно называется AppModule

--- Стили и шаблоны компонента ---

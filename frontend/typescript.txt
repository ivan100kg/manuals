TypeScript

Это типизированный JS

TS -> TSCompiler -> JS
    - создаем файл file.ts
    - компилируем
    - получаем file.js 

# Console
npm i -g typescript     // установить typescript
tsc --v                 // tsc - компилятор ts, посмотреть версию
tsc --init              // конфиг файл для настройки, настроить под проект <-----------+
tsc                     // скомпилить все файлы в name.js (имя ставится в настройках) -+
tsc index.ts            // скомпилить 1 файл в index.js


--- datatypes --------------------------------------------------------------------------------------
Primitive types:
string      'text'      let firstName: string;  // 'John' "Mike" `Fuck you ${name}`
number      3.14	    let price: number;      // 100 -2.4 0b1000 0o146 0x2FF 9007199254740991n
boolean     true	    let pending: boolean;   // true false
null	    null        has one value: null
undefined	undefined   has one value: undefined. It is a default value of an uninitialized variable
symbol	    symbol      represents a unique constant value

Object types:
let person: {           // объявляем объект, специфицурем какие поля какого типа
   name: string;
   age: number
}
person = {              // инициализация
   name: 'John',
   age: 25
};
let vacant: {} = {};    // объявить + инициализация, пустой объект(можно с не пустыми)

Array:
let names: string[];    // могут содержаться только строки
names = ['John','Jane'];
names.push('Ivan');
работают все методы forEach() map() reduce() filter()
// микс различных типов
let scores : (string | number)[];
scores = ['Programming', 5, 'Software Design', 4];

Tupple:
массив только фиксированного числа эл, опред типов
let tup: [number, boolean] = [1, false];
tup[0].toFixed(2);      // спец методы типо
let rgb: [number, number, number] = [255, 0, 0];

Enum:
константы, под капотом это числа от 0
enum ApprovalStatus {   // enum
    draft = 1,          // по умолчанию от 0, можно поменять          
    submitted,
    approved,
    rejected
};
ApprovalStatus.draft    // обращения к константам

Any:
любой тип
let result;
const json = `{"latitude": 10.11, "longitude":12.12}`;

Void:
отсутствие типа
function log(message): void {   // обычное применеиние в ф-ях без возвр знач
    console.log(messsage);
}
let useless: void = undefined;  // к void можно присвоить только undefined

Never:
тип не содержащий никаких занчений используется в функциях
которые всегда завершаются ошибкой, либо бесконечным циклом
function raiseError(message: string): never {
    throw new Error(message);
}

Union of types:
let result: number | string;    // можно присвоить только строку или число
function add(a: number | string, b: number | string)    // в параметрах

Alias:
шаблон для типа
type chars = string;    // шаблон для string
let messsage: chars;    // same as string type

String Literal:
let click: 'click';     // click - string literal type = 'click'
click = 'click';        // valid
click = 'dblclick';     // compiler error
string literal type может иметь одно из неск значений
let mouseEvent: 'click' | 'dblclick' | 'mouseup' | 'mousedown';
mouseEvent = 'click';       // valid
mouseEvent = 'dblclick';    // valid
mouseEvent = 'mouseup';     // valid
mouseEvent = 'mousedown';   // valid
mouseEvent = 'mouseover';   // compiler error


--- Basic constructions ----------------------------------------------
if (condition1) {
    code;
} else if (condition2) {
    code;
} else {
    code;
}

switch ( expression ) {
    case value1:
        code;
        break;
    case value2:
    case value3:
        code;
        break;
    default: 
        break;
}

for(initialization; condition; expression) {
    break;
}

while(condition) {
    continue;
}

do {
    code;
} while(condition);


--- Function --------------------------------------------------------------------------
function add(a: number, b: number): number {    // принимает 2 числа и возвращает число
    return a + b;
}

let add: (a: number, b: number) => number =     // тоже самое
    function (x: number, y: number) {
        return x + y;
    };

function echo(message: string): void {          // void ф-ия
    console.log(message.toUpperCase());
}

function multiply(a: number, b?: number)        // опционаяльный параметр, может быть или не быть
function multiply(a: number, b: number = 5)     // значение параметра по умолчанию
function getTotal(...numbers: number[])         // rest параметры(распаковка массива)

overloading:
function add(a: number, b: number): number;
function add(a: string, b: string): string;
function add(a: any, b: any): any {
   return a + b;
}

--- Class ---------------------------------------------------------
добавляются типы в поля, конструктор, методы
class Person {
    private ssn: string;            // private - доступ внутри класса
    public firstName: string;       // по умолчанию все поля/методы public
    protected lastName: string;     // доступен только в классе и сабклассах
    readonly birthDate: Date;       // final field не изменямая
    private _age : number;          // поле для геттера/сеттера
    private static cnt: number = 0; // статик поле

    constructor(ssn: string, firstName: string, lastName: string) {
        this.ssn = ssn;             
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate; // readonly обязательно иниц в конструкторе
        Person.cnt++;               // статик
    }

    public static getHeadcount() {  // статик метод
        return Person.cnt;      
    }

    getFullName(): string {
        return `${this.firstName} ${this.lastName}`;
    }

    public get age() {              // getter
        return this._age;
    }

    public set age(ag: number) {    // setter
        if (ag <= 0 || ag >= 200) {
            throw new Error('The age is invalid');
        }
        this._age = ag;
    }
}

let person = new Person(171280926, 'John', 'Doe');  // создать объект
person.firstName = 'Ivan';                          // обратиться к полю напрямую
person.age = 12;                                    // setter
Person.getHeadcount();                              // static

// конструктор с модификаторами сразу
constructor(protected ssn: string, 
            private firstName: string, 
            private lastName: string, 
            readonly birthDate: Date)

// наследование
class Employee extends Person {                 
    constructor(
        firstName: string,
        lastName: string,
        private jobTitle: string) {
        
        // call the constructor of the Person class:
        super(firstName, lastName);
    }
}

let emp1: Employee = new Employee('Ivan', 'Bond', 'programmer');
let pers1: Person = new Person('12345', 'Oleg', 'Gvozd', new Date(), 39);
let pers2: Person = new Employee('Igor', 'Vernik', 'cleaner');              // полимофизм

// Abstract
abstract class Employee {
    constructor(private firstName: string, private lastName: string) {
    }
    abstract getSalary(): number                // абстрактный метод, долж быть impl в наследниках
    get fullName(): string {                    // обычный метод
        return `${this.firstName} ${this.lastName}`;
    }
}
// имплементатор
class FullTimeEmployee extends Employee {
    constructor(firstName: string, lastName: string, private salary: number) {
        super(firstName, lastName);
    }
    getSalary(): number {                       // implementation   
        return this.salary;
    }
}

--- Interfaces ------------------------------------------------------------------------------------
interface Person {                              // интерфейс 
    firstName: string;
    lastName?: strring;                         // опциональный элемент
    readonly ssn: string;                       // только для чтения
}

let john: Person = {                            // объект типа Person
    firstName: 'John',
    lastName: 'Doe'                             // опциональный элемент, можно не указывать
    readonly ssn: '124-214';                    // только для чтения, менять потом нельзя
};


function getFullName(person: Person) {          // использование в параметрах функции
    return `${person.firstName} ${person.lastName}`;
}

console.log(getFullName(john));                 // использование в аргументах

// функциональный интерфейс
interface StringFormat {
    (str: string, isUpper: boolean): string     // сигнатура ф-ии
}

let format: StringFormat;                       // переменная типа StringFormat

format = function (str: string, isUpper: boolean) { // имлем ф-ии
    return isUpper ? str.toLocaleUpperCase() : str.toLocaleLowerCase();
};

console.log(format('hi', true));                // вызов ф-ии

// имплементация интерфейса как в Java
interface Json {                                // интерфейс
   toJSON(): string
}

class Person implements Json {                  // класс имплементирующий интерфейс
    constructor(private firstName: string,
        private lastName: string) {
    }
    toJson(): string {                          // переопределение метода
        return JSON.stringify(this);
    }
}

// наследование интерфейсов
interface Mailable {                            // interface
    send(email: string): boolean
    queue(email: string): boolean
}

interface FutureMailable extends Mailable {     // наследуется от Mailable, имеет все его методы
    later(email: string, after: number): boolean
}

class Mail implements FutureMailable {          // класс имплементирующий интерфейс, переопр все методы
    later(email: string, after: number): boolean {
        console.log(`Send email to ${email} in ${after} ms.`);
        return true;
    }
    send(email: string): boolean {
        console.log(`Sent email to ${email} after ${after} ms. `);
        return true;
    }
    queue(email: string): boolean {
        console.log(`Queue an email to ${email}.`);
        return true;
    }
}

interface D extends B, C {                      // множественное наследование интерфейсов
    d(): void
}

// наследование от класса
class Control {                                 // класс
    private state: boolean;
}

interface StatefulControl extends Control {    // интерфейс, наследуется от класса
    enable(): void
}

// если нужно имплементить такой интерфейс, то нужно наследоваться от класса
class TextBox extends Control implements StatefulControl {
    enable() { }
}

--- Intersection Types -------------------------------------------------------
Новый тип создается мультикомбинацией других типов, имеет все фишки этих типов

interface A {
    name: string;
}

interface B {
    age: number;
}

// my types
type myTypeAND = A & B;     // все поля
type myTypeOR = A | B;      // или поля одного или другого или все

// варианты
let Igor: myTypeAND = {name: 'Igor', age: 49};
let Inna: myTypeOR = {name: 'Inna'};
let Egor: myTypeOR = {age: 45};
let Lilu: myTypeOR = {name: 'Lilu', age: 19};

// primitive
type xz = string | number;
let myVar1: xz = 12;
let myVar2: xz = '12';


--- Type Guards -------------------------------------------------------------------------------
typeof a === 'number';      // -> boolean, проверка на тип
obj instanceof String;      // -> boolean, проверка на принадлежность классу(не для примитивов)
'name' in partner;          // -> boolean, проверка на вхождение свойства в объект


--- Casting -----------------------------------------------------------------------------------
// downcasting
Element -> HTMLElement -> HTMLInputElement                  // иерархия наследования
let input = document.querySelector('input["type="text"]');  // Element type
let enteredText = input as HTMLInputElement;                // кастинг к HTMLInputElement
let enteredText = <HTMLInputElement>input;                  // тоже самое, др синтаксис


--- Assertions --------------------------------------------------------------------------------
sum(5, 12) as string;       // говорим компилятору что это строка
<string>sum(5, 12);         // тоже самое но другой синтаксис
TypeScript

Node.js                     - это среда времени выполнения JavaScript, которая позволяет запускать JavaScript на сервере. 
                              Он позволяет создавать серверные приложения с использованием JavaScript.
NPM (Node Package Manager)  - это менеджер пакетов для JavaScript, который позволяет управлять зависимостями 
                              проекта, устанавливать различные пакеты, выполнять скрипты и многое другое.
TSC (TypeScript Compiler)   - это компилятор TypeScript, который преобразует файлы TypeScript в файлы JavaScript. 
TypeScript                  - это язык программирования, который расширяет функциональность JavaScript, 
                              добавляя статическую типизацию.


TS -> TSCompiler -> JS
    - создаем файл file.ts
    - компилируем
    - получаем file.js 

Установить/переустановить node и npm:
curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
sudo apt-get install -y nodejs

npm i -g typescript         # установка typescript

# Console
tsc --v                 // посмотреть версию
tsc --init              // создать tsconfig.json для настройки, настроить под проект 
tsc                     // скомпилить все файлы в name.js (имя ставится в настройках)
tsc index.ts            // скомпилить 1 файл в index.js


--- datatypes --------------------------------------------------------------------------------------
--- Primitive types ---
    type        example                             declare
    ------------------------------------------------------------------------
    string      'John' "Mike" `Fuck you ${name}`    const firstName: string;
    number      100 -2.4 0b1000 0o146 0x2FF 90991n	const price: number;
    boolean     true false	                        const pending: boolean;
    null	    null                                const value: null;
    undefined	undefined                           const value: undefined;
    symbol	    symbol                              

    Способы объявления типов переменных: 
    const age: number = 41; // можно объявлять жестко с типом
    const age = 41;         // либо можно авто, компилятор сам определит тип
    age = 'hi';             // ERROR, в любом случае объявления, после присваивания невозможно изменить тип


--- Special types ---
    Type: any
    // лучше стараться не использовать
    let result: any = true;     // переменная может принимать любой тип
    result = 'hi';              // string
    result = 12;                // number
    result += 1;                // какие-то действия

    Type: unknown
    // если есть значение, тип которого неизвестен, лучше использовать unknown
    let unk: unknown = true;    // переменная может принимать любой тип
    unk = 13;                   // можно менять
    unk += 1;                   // ERROR, сначала нужно привести тип, потом действия
    unk = unk as number + 1;    // привести тип с помощью 'as'

    Type: never
    // выдает ошибку всякий раз, когда она определена(редко используется)
    let x: never = true;        // Error: Type 'boolean' is not assignable to type 'never'
    function raiseError(message: string): never { // может использ в функциях которые всегда 
        throw new Error(message);                    заверш ошибкой, либо бесконечным циклом
    }

    Type: void
    отсутствие типа
    function log(message): void {       // обычное применеиние в ф-ях без возвр знач
        console.log(messsage);
    }
    let useless: void = undefined;      // к void можно присвоить только undefined


--- Casting/приведение типов ---
    let x: unknown = 'hello';           // неизвестный тип который потом нужно привести
    console.log((x as string).length);  // приведение с помощью 'as type'
    console.log((<string>x).length);    // приведение с помощью '<type>'


--- Object types ---
    Object:
    let person: {           // объявляем объект, специфицурем какие поля какого типа
        name: string,
        age: number,
        weight?: number     // ? опциональный элемент(может быть или не быть)
    }
    person = {              // инициализация
        name: 'John',
        age: 25
    };
    let vacant: {} = {};    // объявить + инициализация, пустой объект(можно с не пустыми)
    const user = {          // либо объявляем как в js - компилятор авто определит типы
        name: 'John', 
        age: 25
    };

    Array:
    let names: string[];        // могут содержаться только строки
    let names: Array<string>;   // могут содержаться только строки(второй синтаксис)
    names = ['John','Jane'];
    names.push('Ivan');
    // работают все методы forEach() map() reduce() filter()
    // микс различных типов
    let scores : (string | number)[];
    scores = ['Programming', 5, 'Software Design', 4];
    // неизменяемый массив
    const names: readonly string[] = ["Dylan"];
    names.push("Jack");     // Error: Property 'push' does not exist on type 'readonly string[]'
    const ponies: Array<Pony> = [new Pony()];   // массив объектов другой синтаксис

    Tupple:
    // массив только фиксированного числа эл, опред типов
    let tup: [number, boolean] = [1, false];
    tup[0].toFixed(2);      // спец методы типов
    // лучше делать readonly, чтобы заблокировать методы типа push()
    let rgb: readonly [number, number, number] = [255, 0, 0];
    // Named Tuples, именные массивы
    const graph: [x: number, y: number] = [55.2, 41.3];


    Enum:
    // константы, под капотом это числа от 0
    enum ApprovalStatus {   // enum
        draft = 1,          // по умолчанию от 0, можно поменять          
        submitted,
        approved,
        rejected
    };
    ApprovalStatus.draft    // обращения к константам
    // можно любые числа присваивать
    enum StatusCodes {
        NotFound = 404,
        Success = 200,
        Accepted = 202,
        BadRequest = 400
    };
    // или строки
    enum CardinalDirections {
        North = 'North',
        East = "East",
        South = "South",
        West = "West"
    };


--- Alias ---
    // можно создать свой псевдоним для типа как на основе примитива так и ссылочного
    type CarYear = number;  // алиас на основе примитивных типов
    type CarType = string;
    type CarModel = string;
    type Car = {            // алиас на основе комплексного типа(объект/массив)
        year: CarYear,
        type: CarType,
        model: CarModel
    };

    // применять алиасы можно по имени как бы это были типы
    const carYear: CarYear = 2001;
    const carType: CarType = "Toyota";
    const carModel: CarModel = "Corolla";
    const car: Car = {
        year: carYear,
        type: carType,
        model: carModel
    };

    // можно извлечь тип уже готового объекта
    type MyType = typeof Car;
    const myType: MyType = {...}    // объект Car


--- Union of types ---
    // тип либо-либо, например можно присвоить только строку или число
    let result: number | string = 12;                       // 12 или '45'                            
    function add(a: number | string, b: number | string)    // в параметрах


--- String Literal ---
    Бывают строковые, числовые и булевые литералы
    Переменная может принять только 1 из конкретных значений, указанных ранее
    let click: 'click';         // click - string literal type = 'click'
    click = 'click';            // valid
    click = 'dblclick';         // compiler error
    // string literal type может иметь одно из неск значений
    let mouseEvent: 'click' | 'dblclick' | 'mouseup' | 'mousedown';
    mouseEvent = 'click';       // valid
    mouseEvent = 'dblclick';    // valid
    mouseEvent = 'mouseup';     // valid
    mouseEvent = 'mousedown';   // valid
    mouseEvent = 'mouseover';   // compiler error


--- Utility Types/служебные типы ---
    // интерфейс для примера
    interface Point {
        x?: number;
        y: number;
    }
    
    Partial
    // делает все поля/свойства объекта опциональными
    let pointPart: Partial<Point> = {};     // x и y опциональные
    pointPart.x = 10;

    Required
    // делает все поля/свойства объекта обязательными
    let pointPart: Partial<Point> = {       // x и y обязательные
        x: 10,
        y: 12
    };

    Record
    // запись определения типа объекта с определенным типом ключа и типом значения
    const nameAgeMap: Record<string, number> = {
        'Alice': 21,
        'Bob': 25
    };

    Omit
    // убирает из объекта указанные ключи
    let pointPart: Omit<Point, 'x'> = {     // убрать ключ 'x'(если много то через |)
        y: 13
    };

    Pick
    // вытягивает нужные ключи
    let pointPart: Pick<Point, 'y'> = {     // убрать ключ 'y'(если много то через |)
        y: 13
    };

    Exclude
    // убирает смежные типы
    type P = string | number | boolean;
    const value: Exclude<P, string> = true;// убрать возможного типа string

    Readonly
    // нельзя модифицировать
    let pointPart: Readonly<Point> = {     // x и y больше нельзя менять
        x: 10,
        y: 12
    }

    ReturnType/Parameters
    // вытягивают из функции параметры/возвращающий тип (см мануал)



--- Basic constructions --------------------
if (condition1) {
    code;
} else if (condition2) {
    code;
} else {
    code;
}

switch ( expression ) {
    case value1:
        code;
        break;
    case value2:
    case value3:
        code;
        break;
    default: 
        break;
}

for(initialization; condition; expression) {
    break;
}

while(condition) {
    continue;
}

do {
    code;
} while(condition);


--- Function --------------------------------------------------------------------------
function add(a: number, b: number): number {    // принимает 2 числа и возвращает число
    return a + b;
}

let add: (a: number, b: number) => number =     // тоже самое
    function (x: number, y: number) {
        return x + y;
    };

function echo(message: string): void {          // void ф-ия
    console.log(message.toUpperCase());
}

function multiply(a: number, b?: number)        // опционаяльный параметр, может быть или не быть
function multiply(a: number, b: number = 5)     // значение параметра по умолчанию
function getTotal(...numbers: number[])         // rest параметры(распаковка массива)

// overloading
function add(a: number, b: number): number;
function add(a: string, b: string): string;
function add(a: any, b: any): any {
   return a + b;
}

// Alias
type Negate = (value: number) => number;        // алиас из функции
const foo: Negate = (value) => value * -1;      // функция с типом Negate


--- Generics ------------------------------------------------------------------------------------
Дженерики позволяют создавать "переменные типа", которые можно использовать для создания классов, 
функций и псевдонимов типов, которым не нужно явно определять типы, которые они используют.
Дженерики упрощают написание повторно используемого кода.

// function
function createPair<S, T>(v1: S, v2: T): [S, T] {       // использование в ф-ии, которая принимает и
  return [v1, v2];                                         вовращает любые 2 типа
}
console.log(createPair<string, number>('hello', 42));   // ['hello', 42]
console.log(createPair<boolean, null>(true, null));     // [true, null]

// class
class NamedValue<T> {                                   // класс использует тип T
    private _value: T | undefined;                      // T или undefined

    constructor(private name: string) {}

    public setValue(value: T) {                         // сеттер
        this._value = value;
    }

    public getValue(): T | undefined {                  // геттер
        return this._value;
    }

    public toString(): string {                         // toString
        return `${this.name}: ${this._value}`;
    }
}
let value = new NamedValue<number>('myNumber');         // созд объект класса
value.setValue(10);                                     // любой тип   
console.log(value.toString());                          // myNumber: 10

// alias
type Wrapped<T> = { value: T };                         // использование в алиасах
const wrappedValue: Wrapped<number> = { value: 10 };


--- Class -----------------------------------------------------------
добавляются типы в поля, конструктор, методы
class Person {
    private ssn: string;            // private - доступ внутри класса
    public firstName: string;       // по умолчанию все поля/методы public
    protected lastName: string;     // доступен только в классе и сабклассах
    readonly birthDate: Date;       // final field не изменямая
    private _age : number;          // поле для геттера/сеттера
    private static cnt: number = 0; // статик поле

    constructor(ssn: string, firstName: string, lastName: string) {
        this.ssn = ssn;             
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate; // readonly обязательно иниц в конструкторе
        Person.cnt++;               // статик
    }

    public static getHeadcount() {  // статик метод
        return Person.cnt;      
    }

    getFullName(): string {
        return `${this.firstName} ${this.lastName}`;
    }

    public get age() {              // getter
        return this._age;
    }

    public set age(ag: number) {    // setter
        if (ag <= 0 || ag >= 200) {
            throw new Error('The age is invalid');
        }
        this._age = ag;
    }
}

let person = new Person(171280926, 'John', 'Doe');  // создать объект
person.firstName = 'Ivan';                          // обратиться к полю напрямую
person.age = 12;                                    // setter
Person.getHeadcount();                              // static

// конструктор с модификаторами сразу
constructor(protected ssn: string, 
            private firstName: string, 
            private lastName: string, 
            readonly birthDate: Date)

// наследование
class Employee extends Person {                 
    constructor(
        firstName: string,
        lastName: string,
        private jobTitle: string) {
        
        // call the constructor of the Person class:
        super(firstName, lastName);
    }
}

let emp1: Employee = new Employee('Ivan', 'Bond', 'programmer');
let pers1: Person = new Person('12345', 'Oleg', 'Gvozd', new Date(), 39);
let pers2: Person = new Employee('Igor', 'Vernik', 'cleaner');              // полимофизм

// Abstract
abstract class Employee {
    constructor(private firstName: string, private lastName: string) {
    }
    abstract getSalary(): number                // абстрактный метод, долж быть impl в наследниках
    get fullName(): string {                    // обычный метод
        return `${this.firstName} ${this.lastName}`;
    }
}
// имплементатор
class FullTimeEmployee extends Employee {
    constructor(firstName: string, lastName: string, private salary: number) {
        super(firstName, lastName);
    }
    getSalary(): number {                       // implementation   
        return this.salary;
    }
}

--- Interfaces ---------------------------------------------------------------------------
interface Person {                              // интерфейс 
    firstName: string;
    lastName?: strring;                         // опциональный элемент
    readonly ssn: string;                       // только для чтения
}

let john: Person = {                            // объект типа Person
    firstName: 'John',
    lastName: 'Doe'                             // опциональный элемент, можно не указывать
    readonly ssn: '124-214';                    // только для чтения, менять потом нельзя
};


function getFullName(person: Person) {          // использование в параметрах функции
    return `${person.firstName} ${person.lastName}`;
}

console.log(getFullName(john));                 // использование в аргументах

// функциональный интерфейс
interface StringFormat {
    (str: string, isUpper: boolean): string     // сигнатура ф-ии
}

let format: StringFormat;                       // переменная типа StringFormat

format = function (str: string, isUpper: boolean) { // имлем ф-ии
    return isUpper ? str.toLocaleUpperCase() : str.toLocaleLowerCase();
};

console.log(format('hi', true));                // вызов ф-ии

// имплементация интерфейса как в Java
interface Json {                                // интерфейс
   toJSON(): string
}

class Person implements Json {                  // класс имплементирующий интерфейс
    constructor(private firstName: string,
        private lastName: string) {
    }
    toJson(): string {                          // переопределение метода
        return JSON.stringify(this);
    }
}

// наследование интерфейсов
interface Mailable {                            // interface
    send(email: string): boolean
    queue(email: string): boolean
}

interface FutureMailable extends Mailable {     // наследуется от Mailable, имеет все его методы
    later(email: string, after: number): boolean
}

class Mail implements FutureMailable {          // класс имплементирующий интерфейс, переопр все методы
    later(email: string, after: number): boolean {
        console.log(`Send email to ${email} in ${after} ms.`);
        return true;
    }
    send(email: string): boolean {
        console.log(`Sent email to ${email} after ${after} ms. `);
        return true;
    }
    queue(email: string): boolean {
        console.log(`Queue an email to ${email}.`);
        return true;
    }
}

interface D extends B, C {                      // множественное наследование интерфейсов
    d(): void
}

// наследование от класса
class Control {                                 // класс
    private state: boolean;
}

interface StatefulControl extends Control {    // интерфейс, наследуется от класса
    enable(): void
}

// если нужно имплементить такой интерфейс, то нужно наследоваться от класса
class TextBox extends Control implements StatefulControl {
    enable() { }
}


--- Decorator -------------------------------------------------------
Объявить @Decorator можно у:
    -класс
    -свойство класса
    -функция
    -параметр функции
    -параметр конструктора

class RaceService {
    @Log()
    getRaces() {
        // call API

Декоратор:
    const Log = () => {
        return (target: any, name: string, descriptor: any) => {
            logger.log(`call to ${name}`);
            return descriptor;
        };
    };

    target      - метод помеченный декоратором
    name        - имя помеченного метода
    descriptor  - дескриптор помеченного метода

Параметры:
    @Log({name: 'John'})    декоратор может принимать параметры

--- Intersection Types -------------------------------------------------------
Новый тип создается мультикомбинацией других типов, имеет все фишки этих типов

interface A {
    name: string;
}

interface B {
    age: number;
}

// my types
type myTypeAND = A & B;     // все поля
type myTypeOR = A | B;      // или поля одного или другого или все

// варианты
let Igor: myTypeAND = {name: 'Igor', age: 49};
let Inna: myTypeOR = {name: 'Inna'};
let Egor: myTypeOR = {age: 45};
let Lilu: myTypeOR = {name: 'Lilu', age: 19};

// primitive
type xz = string | number;
let myVar1: xz = 12;
let myVar2: xz = '12';


--- Type Guards -------------------------------------------------------------------------------
typeof a === 'number';      // -> boolean, проверка на тип
obj instanceof String;      // -> boolean, проверка на принадлежность классу(не для примитивов)
'name' in partner;          // -> boolean, проверка на вхождение свойства в объект



--- Assertions ---
sum(5, 12) as string;       // говорим компилятору что это строка
<string>sum(5, 12);         // тоже самое но другой синтаксис


--- Проверки на null, опциональная цепочка, убеждение ---
elem?.age += 1;             // проверить перед операцией на null undefined
elem!.age += 2;             // указать что elem однозначно не null и не undefined
# Flutter - framework on Dart and tools
# Dart - programming language


--- About ----------------------------------------------------------------------------
Flutter это фреймворк для создания UI для различных платформ, используется единый язык
Dart - programming language of Google
Приложение на флаттере - набор виджетов, все состоит из виджетов


--- setings -----------------------------------
1. https://docs.flutter.dev/get-started/install
после установки весх компонентов могут быть ошибки:
    unable to find bundled java version - Go to "C:\Program Files\Android\Android Studio"
    then copy the content of jbr and paste the content into jre folder
    cd ~/android-studio/ && ln -s jbr jre - for linux
    flutter config --android-studio-dir=/home/ivan/Programming/android-studio
    
    unable to confirm if installed Windows version is 10 or greater - 
    flutter upgrade
    flutter channel
    flutter channel master
    flutter upgrade
    flutter channel
2. install plagin for VSCode
3. Config files
    pubspec.yaml - specifies basic information about your app, such as its current version,
    its dependencies, and the assets with which it will ship
    analysis_options.yaml - настройки для анализатора

--- terminal commands ---
flutter create my-project   # create new flutter project with name 'my-project'
flutter run                 # run project
dart pub add pedantic_mono  # добавить пакет
dart pub get                # обновить пакеты согласно pubspec.yaml

--- project ---
android/        - полная сборка для различных платформ - все заполняется авто
ios/            ...
linux/          ...
windows/        ...
build/          - различные файлы компилляции для flutter sdk - все на автомате
test/           - авто тесты
lib/            - our code working directory
  .metadata     - атоматич файл для flutter
  .packages     ...
  .my-proj.iml  ...
  pubspec.lock  ...
  pubspec.yaml  - описание, всякие зависимости проекта(pub.dev), шрифты, фотки ...
  analysis_options.yaml

--- pubspec.yaml ---
name: flutter_complete_guide
description: A new Flutter project.
publish_to: 'none'                    # Remove this line if you wish to publish to pub.dev
version: 0.1.0+1                      # версия нашего проекта
environment:                          # окружение
  sdk: '>=2.19.0 <3.0.0'              # версия нашей sdk должна попадать в диапазон
                                        смотреть flutter --version (Tools • Dart 2.19.2)
dependencies:                         # зависимости на проде, берем с pub.dev
  flutter:                            # стандартная необходимая библиотека
    sdk: flutter                      
  cupertino_icons: ^1.0.2             # иконки для ios
  pedantic: ^1.11.0                   # подключение сторонней либы с pub.dev
dev_dependencies:                     # зависимости только для разработки, в прод не идет
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0
flutter:                              # подключение различн шрифтов иконок итд
  uses-material-design: true
  fonts:                              # шрифты
    - family: Rubik                   # определенный скаченный шрифт
      fonts:
        - asset: fonts/Rubik-VariableFont_wght.ttf

--- analysis_options.yaml ---
include: package:pedantic/analysis_options.1.11.0.yaml  # наш подключ пакет версия та же

analyzer:                             # свои настройки
  strong-mode: 
    implicit-casts: false             #
    implicit-dynamic: false           # динамик типы будет запрещать

linter:
  rules:
    - prefer_const_constructors       # где можно const - подсветит
    - prefer_const_declarations
    - avoid_print                     # запретить print()
    - use_key_in_widget_constructors

--- structure ---
           My App
             |
        My Home Page
        /          \
Some Widget     Other Widget

lib/main.dart - main file of app

import 'package:flutter/material.dart'; // импорт пакета - доступен так как в pubspec.yaml
                                           прописаны dependencies: flutter
                                           material.dart - набор виджетов для Android
void main() {                         - точка старта, вызывается при запускe приложения 
    runApp(MyApp());                  - функция из импортированного пакета material, приним
}                                       виджет, который вызывает build() - отрисовка

class MyApp extends StatelessWidget { - класс наслед от виджета, все эл приложения - виджеты
  const MyApp({super.key});             code in MyApp sets up the whole app. It creates the 
    @override                           app-wide state, names the app, defines the visual theme
    Widget build(BuildContext context){ - context - метаданные исп флаттеров о тек виджете
      return ChangeNotifierProvider(  - обязывает все виджеты хранить текущее состояние(ниже)
        create: (context) => MyAppState(),
        child: MaterialApp(
        title: 'Namer App',
        theme: ThemeData(
          useMaterial3: true,
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepOrange),
        ),
        home: MyHomePage(),
      ),
    );
  }
}

class MyAppState exts ChangeNotifier{ - класс опред состояние, определяет данные, которые
  var current = WordPair.random();      будут использоваться функциями. ChangeNotifier -
                                        если будут изменения - все виджеты будут знать
  void getNext() {                    - какой-то обработчик 
    current = WordPair.random();      - действия
    notifyListeners();                - посылает уведомления виджетам(кто подписан)
  }                                     об изменениях

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {- автоматически выз при изменении виджета
    var appState = context.watch<MyAppState>();  - каждый виджет просм текущее App сост
    return Scaffold(                  - кажд виджет возвращ другой виджет/дерево виджетов
      body: Column(                     Scaffold - часто исп полезный виджет
        children: [                   - Column - один из базовых layout of widget
          Text('A random good idea:'),  вставляет люб кол-во children в колонку сверху-вниз
          Text(appState.hui),         - Text widget  
          Text(appState.current.asLowerCase), - обращение к состоянию appState(выше),
                                                получение знач переменной
          // add the button
          ElevatedButton(
            onPressed: () {
              appState.getNext();     - привязываем обработчик на кнопку
            },
            child: Text('Next'),
          ),
        ],                            - запятые можно оставлять у посл элем для удобства
      ),                                вставки других элементов потом(также с , на конце)


--- Widgets ------------------------------------------------
Виджеты         - это классы Dart, которые имеют build метод
Widget          - главный базовый виджет, предок для всех
Widget catalog  - все виджеты flutter на сайте по категориям  с описанием

Типы виджетов:
visible/видимые виджеты:  Text(), ElevatedButton(), Card() ...
unvisible виджеты:        определяющие структуру и контроль - Center(), Column()..

Material Disign - это система дизайна, созданная Google, чтобы помочь командам 
создавать высококачественные цифровые приложения для Android, iOS, Flutter и Интернета
Material Guidelines - рекомендации следования дизайну от Google.

MaterialApp   - базовый root виджет, предоставляет доступ к множеству др виджетов,
                следует Material Guidelines. Используем этот всегда! Должен быть
                возвращен на самом верхнем уровне из нашего приложения, которое
                запускается в main()
CupertinoApp  - брат MaterialApp только все под Apple ios

--- Свои виджеты ---
1. Каждый виджет должен быть унаследован от одного из 2-х виджетов
     StatelessWidget - формируется при вызове конструктора и не меняется runtime
     StatefulWidget  - может менять свое внутреннее состояние(меняет виджеты)
2. Необходимо добавить/переопределить build метод - который принимает BuildContext и
   возвращает Widget и он рисуется флаттером. Для StatelessWidget вызывается 1 раз.
   В этом методе как раз вся структура для отрисовки виджета.
3. Обычно под 1 класс - 1 файл, редко 2 виджета в 1 файле

Examples:
// StatelessWidget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(...                // отрисовка виджетов тут
  }}
// StatefulWidget - разделен как бы на 2 класса Основной+Состояние(с build методом)
class MyApp extends StatefulWidget {      // <--------------------------+
  @override                                                             |
  State<MyApp> createState() {  // переопред createState()              |
    return _MyAppState();       // возвращ класс ниже --+               |
  }}  //      v-----------------------------------------+               |
class _MyAppState extends State<MyApp> {  // привязка к классу MyApp ---+
  var _questionIndex = 0;     // какие-то данные
  void _answerQuestion() {    // обработчик кнопки приватный, только в классе
    setState(() {             // отрисовывает виджет заново build() --------+
      _questionIndex++;       // private переменная - исп только в классе   |
    )});                                                                    |
  }                                                                         |
  @override                                                                 |
  Widget build(BuildContext context) {  <-----------------------------------+
    return MaterialApp(...    // отрисовка виджетов тут
}

--- Базовые виджеты ---
MaterialApp(                  // корн виджет, который должен быть на самом верху
  title: 'some title',        // заголовок на вкладке(для веб)
  home: Text('some text'),    // основное тело - весь экран

Scaffold(                     // базовый дизайн и структура страницы/каркас экрана
  appBar: AppBar(             // бар, передадим ему AppBar() - который включ много чего
  body: Column(               // тело содержащее основное на странице

Center(                       // выравнивает все по центру
  child: ...                  // содержит др виджет

Align(                        // типа Center но может выравнивать и по другим краям
  alignment: Alignment.bottomRight,

Container(                    // содержит др виджет
  color: Colors.cyan,         // можно задать цвет
  width: double.infinity,     // макс ширина 
  height: 120,
  child: ...,
  margin: EdgeInsets.only(left: 20, right: 20),               // внешние отступы
  padding: EdgeInsets.symmetric(vertical: 5, horizontal: 10), // внутренние отступы

Row(                          // контейнер для виджетов, занимает все пространство по верт
Column(                       // контейнер для виджетов, занимает все пространство по гориз
  mainAxisAlignment: ... ,    // выравнивание относ глав оси (center, start, spaceAround..)
  crossAxisAlignment: ... ,   // выравнивание относ другой оси (center, start, end..)
  children: [ ...             // может содержать множество виджетов
  Spacer()                    // пробел максимально возможной длины между эл в Row

SizedBox(                     // просто отступ в любом месте
  width: 20,                  // можно чисто отступ по вертикали или гориз, или оба
  height: 30,

Text(                         // отображение текста
  'some text',                // позиц парам строка
  style: TextStyle(           // различные стили для текста
    color: Colors.black,
    backgroundColor: Colors.orange,
    fontSize: 20,
    fontFamily: 'Rubik',      // ---------------------------------------------+
                                                                              |
# Свой шрифт:                                                                 |
заходим в google fonts и скачиваем понравившийся                              |
перенесем шрифт .ttf из скаченного архива в новую дир в корне проекта fonts/  |
в pubspec.yaml добавим/расскомментим                                          |
  fonts:                                                                      |
    - family: Rubik   <-------------------------------------------------------+
      fonts:
        - asset: fonts/Rubik-VariableFont_wght.ttf

Expanded(
  child: Text('Избранное'),   // экспандед занимает все возможное пространство
                                 например элемент A в строке: A______BCD => A-expanded
                                 несколько таких делят пустое пространство междк собой


--- layout -----------------------------------------------------------------
Родительский виджет может указать дочернему ограничения по занимаемому месту
min width, max width, min height, max height, нек виджеты не могут этого

Center(                       // Center позволяет чайлду выставлять размеры --+
  child: Container(           // Container будет занимать 200x200 <-----------+
    width: double.infinity,   // вся ширина     
    height: 200,
    color: Colors.amber,
    child: Container(         // Container не дает такой возможности, будет 200x200
      width: 50,              // здесь родитель не даст занять меньше
      height: 50,
      color: Colors.black,

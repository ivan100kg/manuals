--- Setup ---
git config --global user.name "my Name"       	# name
git config --global user.email myemail@ex.hu  	# email
git config --global core.editor vim				# default editor

--- Start a Project ---
git init                        # создание репозитория в сущ каталоге
git clone <url>                 # клонировать репозиторий с сервера

--- Make Changes ---
git add <file>              	# добавить новый файл в tracked files,
                                  измененный файл в index(подготовка к коммиту)
git commit -m "Initial commit"  # коммит, фиксация изменений, -m - коммент
git commit -am "Initial commit" # add + commit

--- Show Info ---
git status                      # состояние проекта
git diff						# что изменено но не в индексе
git diff --staged				# что в индексе и готовится к коммиту
git log                         # история коммитов, всех веток --all
git log --oneline --graph -a -8 # кратк опис + график + все ветки + лимит

--- Отмена/откат ---
git commit --amend				# переделать/заменить последний коммит
                                  можно добавить/удалить то что забыли, 
                                  выполнить add, переписать сообщение.
git reset HEAD <file>           # убрать файл из индекса, вернуть в неинд
git restore --staged <file>     # убрать файл из индекса, вернуть в неинд
git checkout -- <file>			# для неиндексированного файла отменить все 
git restore <file>				  изменения, вернуть состояние файла до 
                                  состояния последнего коммита.
git rm --cached <file>          # удалить из индекса, вернуть в untracked

--- Remotes/Удаленные(на сервере) репозитории ---
git remote              	    # названия доступных удалённых репозиториев.
                                  origin - имя сервера по умолчанию с которого
                                  производится клонирование.
git remote -v       	        # адреса для чтения и записи, привяз к реп.
git remote add <repn> <url>	    # доб реп и дать ему свое короткое имя 'repn',
                                  так можно связать новый лок реп с GitHub.
git fetch [remote]			    # связаться с реп, получить изменения кот еще нет,
                                  после появятся ссылки все ветки, кот можно
                                  смотреть или слить. Не модифицирует то, над чем 
                                  вы работаете в данный момент, сливается вручную.
                                  --all все изменения со всех репозиториев
git clone <url>				    # автоматически добавляет реп с названием 'origin'
                                  и настраивает локальную ветку master на 
                                  отслеживание удалённой ветки master на сервере.
git pull 					    # извлекает (fetch) данные с сервера, с которого вы
                                  изначально клонировали, с ветки по умолчанию
                                  и автоматически пытается слить (merge) их с кодом
                                  в вашей working directory
git push <remote> <branch>      # отправка коммитов локальной ветки 'branch' на 
                                  удалённый репозиторий 'remote' (в ту же ветку).
git push origin fix:huix        # отправит локальную ветку fix в ветку huix 
                                  удалённого репозитория origin, свяжет их
git remote show <remote>	    # больше информации об одном из удалённых реп.
                                  показывает куда и откуда будет что вливаться, 
                                  какие ветки есть и как все настроено.
git remote rename <o> <n>	    # переименовать реп 'o' to 'n'.
git remote remove <remote>	    # удалить репозиторий.

--- Tags/тэги ---
git tag						    # список тэгов
git tag -l "v1.8.*"			    # список тегов соотв шаблону (нач-ся на v1.8.)
git tag -a v1.4 -m "msg"	    # создать annotated tag, msg - комментарий
git tag v1.0-lw				    # создать легковесный тэг
git show v1.4				    # показать данные тега вместе с коммитом, для 
                                  lightweight покажет только коммит.
git tag -a v1.2 9fceb02		    # пометить любой коммит в истории, 9fceb02 - к.сум
git push origin <tagname>	    # отправить тэг на удаленный сервер
git push origin --tags		    # отправить на сервер все тэги
git tag -d v1.4-lw			    # удалить тэг с локального репозитория
git push origin --delete tg	    # удалить тэг 'tg' с сервера
git checkout v2.0.0			    # получить версии файлов, на которые указывает тег,
                                  ряд неприятных побочных эффектов, см доки.
git checkout -b ver2 v2.0.0	    # создать ветку по тэгу.

--- Branches/ветки ---
git branch features             # создать ветку 'features', точная копия master,
                                  новый указатель на текущий коммит.
git checkout features           # переключение на ветку 'features'
git checkout -b new-branch      # создать и сразу переключиться
git switch -c new-branch        # создать и сразу переключиться
git branch                      # показывает ветки и на какой находимся мы
git branch -v                   # показывает ветки с последними коммитами
git branch --merged             # уже слитые ветки с текущей
git branch --no-merged          # не слитые ветки
git branch -d hotfix            # delete branch 'hotfix'
git branch -D hotfix            # delete branch 'hotfix', даже если она не слитая
git branch --move old new       # переименовать ветку 'old' to 'new'

--- Merge/Слияние ---
git merge hotfix                # слияние в текущую ветку ветки 'hotfix'

--- Rebase/перебазирование ---
git checkout issue53            # переключимся на ветку issue53
git rebase master               # перебазировать issue53 относительно ветки master
git checkout master             # переключиться на master
git merge issue53               # выполнить слияние перемоткой

--- Удаленные(на сервере) ветки ---
git branch -r                   # ветки на сервере
git branch --all(-a)            # все ветки локал + удал на сервере
git branch -vv                  # посмотреть как настроены ветки слежения
git remote show <remote>        # полный список удалённых ссылок
git push <remote> <branch>      # отправить лок ветку на сервер
git push -u <remote> <branch>   # залить ветку в репозиторий на сервер
                                  и сделать текущ ветку - веткой слеж
git push origin --delete hotfix # удалить ветку из реп-я на сервере
git fetch --prune				# обновить видимость удал веток
git fetch --all					# получить все изм веток                                                          
git merge origin/fix            # слить удал ветку в свою текущую рабочую ветку
git pull                        # находясь на ветке слежения получить данные
                                  с ее upstream branch с нужного сервера и
                                  провести merge - иными словами pull это
                                  git fetch + git merge
git checkout -b fix origin/fix  # создать локальную ветку на основе удаленной
git checkout -b huix origin/fix # создать лок ветку на основе удал, но с другим
                                  именем, git свяжет их.
git checkout --track origin/fix # создать локальную ветку на основе удаленной
git checkout fix                # попытка извлечь ветку, которая не существует, 
                                  но существует только одна удалённая ветка с 
                                  точно таким же именем, то Git автоматически 
                                  создаст ветку слежения.
git branch -u origin/serverfix  # Если уже есть лок ветка и нужно настроить 
                                  ее на слежение за удалённой веткой, которую  
                                  только что получили, или хотите изменить 
                                  используемую upstream-ветку.
                                  -u или --set-upstream-to

--- Ignoring Files ---
# создаем файл .gitignore добавляем в него все что хотим игнорировать
# шаблоны применяются рекурсивно для всего дерева каталогов

wild cards:
#       - пустые или строки начинающ с '#' игнорируются
*       - 0 or more symbols
?       - 1 symbol
[qw]    - q or w, matches any character inside the brackets
[0-9]   - matches any character between range
каталоги/вложенность:
/temp   - файлы попадающ под шаблон 'temp' только в корневом каталоге
temp/   - исключить директорию попадающ под шаблон 'temp'
!temp   - инвертировать шаблон
a/**/z  - вложенный каталог (a/z, a/b/z, a/b/c/z, и так далее)

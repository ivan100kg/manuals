--- ip ---------------------------------------------------------------------
Позволяет посмотреть сетевые интерфейсы и IP адреса им присвоенные,
посмотреть и настроить таблицу маршрутизации, включать или отключать сетевые
интерфейсы, управлять маршрутизацией и ARP.

Синтаксис:
ip [option] object [command] [params]

option:
    Опции это глобальные настройки, которые сказываются на работе всей
    утилиты независимо от других аргументов, их указывать необязательно.
    -v  -Version    - только вывод информации об утилите и ее версии.
    -h  -human      - выводить данные в удобном для человека виде.
    -s  -stats      - включает вывод статистической информации(-s -s -еще больше)
    -d  -details    - показывать ещё больше подробностей
    -f  -family     - позволяет указать протокол, с которым нужно работать, если
                    протокол не указан, то берется на основе параметров команды.
                    Опция должна принимать одно из значений: 
                        bridge, dnet, inet, inet6, ipx, link 
                    По умолчанию используется inet, link - отсутствие протокола.
    -o  -oneline    - выводить каждую запись с новой строки.
    -r  -resolve    - определять имена хостов с помощью DNS.
    -a  -all        - применить команду ко всем объектам.
    -c  -color      - цветной вывод, доступные значения: auto, always и never.
    -br -brief      - выводить только базовую информацию для удобства чтения.
    -4              - короткая запись для -f inet.
    -6              - короткая запись для -f inet -f inet6.
    -B              - короткая запись для -f inet -f bridge.
    -0              - короткая запись для -f inet -f link.
object:
    Объект - это тип данных, с которым надо будет работать, например: адреса,
    устройства, таблица arp, таблица маршрутизации и так далее.
    address     a   - сетевые адреса
    link        l   - физическое сетевое устройство
    neighbour   n   - просмотр и управление ARP
    route       r   - управление маршрутизацией
    rule        ru  - правила маршрутизации
    tunnel      t   - настройка туннелирования
command:
    Команды - какое-либо действие с объектом. Зависят от объекта к кторому прим.
    add
    change
    del
    delete
    flush
    get
    list
    show
    monitor
    replace
    restore
    save
    set
    update
    ls      - сокращенно для show dev
params:
    Параметры - параметры, для команд(напр для add -> 10.0.2.100/24 dev enp0s3)
    ip l show dev eno1 - dev eno1 параметры для команды show

# example
# address
ip a == ip address show             # посмотреть все IP связ со всеми интерфейсами
ip a show dev enp0s3                # посмотреть IP только для enp0s3 устр-ва
ip a add 10.0.2.100/24 dev enp0s3   # добавить IP адрес с маской в сокр виде
ip a del 10.0.2.100/24 dev enp0s3   # удалить IP адрес от интерфейса
ip a flush                          # удалить все адреса
ip a flush to 10.0.2.0/24           # удалить IP адреса подсети
ip addr add brd [ip_address] dev [interface]   # добавить широковещ адрес для инт-са

# interface
ip l == ip link show                # список сетевых интерфейсов
ip link ls up                       # список работающих интерфейсов
ip link show up                     # список работающих интерфейсов(так же)
ip link set dev enp0s3 down         # выключить интерфейс
ip link set dev enp0s3 up           # включить интерфейс
ip link set mtu 4000 dev enp0s3     # mtu - package size(1500 default)
ip link set dev enp0s3 address AA:BB:CC:DD:EE:FF
                                    # уст-ка MAC-адреса, перед этим откл инт-с
# arp
Состояние устройства может быть:
    REACHABLE - означает валидную, достижимую запись до истечения таймаута.
    PERMANENT - означает постоянную запись, которую может удалить только администратор
    STALE - означает действительную, но недоступную запись
    DELAY - означает, что ядро все еще ожидает проверки из устаревшей записи
ip n == ip neighbour show           # ARP table
ip neigh add 192.168.0.105 lladdr b0:be:76:43:21:41 dev enp0s3
                                    # добавить запись вручную(обычно авто)
ip n del dev enp0s3 192.168.0.105   # удалить запись из ARP таблицы
ip neigh flush dev enp0s3           # очистить все записи для опр инт-са
ip neigh flush                      # очистить всю таблицу

# route
ip r == ip route show               # таблица маршрутизации
ip route add 169.255.0.0 via 169.254.19.153
                                    # добавить маршрут для сети через тот же IP
ip r add 169.255.0.0 dev enp0s3     # указать сетевой инт-с через кот надо отпр
                                      пакеты для определенной сети
ip route del 169.255.0.0 via 169.254.19.153
                                    # удалить маршрут

--- ss -----------------------------------------------------------------------
Socket Statistic
Предоставляет подробную информацию об открытых портах и прослушиваемых сокетах

Отображаемая информация вывода:
Netid               - отображает типы сокетов
State               - отображает состояние сокета:
    ESTAB  - установлен
    UNCONN - не подключен
    LISTEN - прослушивается
Recv-Q              - количество принятых пакетов в очереди
Send-Q              - количество отправленных пакетов в очереди
Local address:port  - адрес локальной машины и порт
Peer address:port   - адрес удаленной машины и порт

Синтаксис
ss [options] [FILTER]
options:
    ss -h     # help
    ss        # ESTAB сокеты (TCP/UNIX/UDP, которые установили соединение)
    ss -a     # все открытые сокеты (TCP/UNIX/UDP), которые установили соединение
    ss -l     # список прослушиваемых сокетов LISTEN
    ss -t     # список всех TCP-соединений
    ss -u     # список всех UDP-соединений
    ss -w     # необработанные сокеты
    ss -x     # сокеты Unix
    ss -4     # список подключений к сокету IPv4 
    ss -6     # список подключений к сокету IPv6
    ss -n     # номера портов вместо алиасов  
    ss -at4   # совмещение команд - все TCP-соединения IPv4
    ss -tp    # процессы сокетов
filter:
    ss -tlnp  # все прослушиваемые tcp с цифровыми портами и именами
    ss -t state listening # TCP-соединение в состоянии прослушивания
    ss -at | grep LISTEN  # TCP-соединение в состоянии прослушивания(с пом grep)
    ss -tr state established '( dport = :22 or sport = :22 )' # подключения к ssh


--- dig -----------------------------------------------------------------------
DNS (Domain Name System) — это система доменных имён, с помощью которой каждому 
имени домена сопоставляется его реальный IP адрес

Основные DNS записи для домена:
    имя         - хост, псевдоним (example.com)
    тип записи:
        А (address record): адрес домена в IPv4, осуществляет привязку домена к IP адресу
        АААА (address record): адрес домена в IPv6
        CNAME (canonical name record): позволяет создавать псевдонимы и субдомены после создания записи типа A
        MX (почтовый сервер): такой тип записи создает специальный поддомен для внутреннего почтового сервера
        NS (сервер имён): служит для определения доменов (или адресов) серверов DNS, которые обслуживают этот домен
        TXT: информационная запись в текстовом виде
        SOA (Start Of Authority): указывает на каком именно сервере хранится полная информация о домене
        PTR: осуществления связи IP-адреса сервера с каноническим именем этого же сервера
    значение    - IP адрес, назначение, ответ и т.д. (178.20.153.253)

Синтаксис команды dig
dig [опции] [@сервер] доменное_имя [тип_записи] [флаги]
опции           - доп фунцкионал:
    -4 - позволяет использовать только IPv4
    -6 - позволяет использовать только IPv6
    -x - предназначена для получения домена по IP
    -f - используется для чтения списка доменов из файла
    -r - предотвращает чтение настроек из файла ~/.digrc
    -t - позволяет указать тип записи, которую надо получить
    -p - позволяет указать номер порта DNS сервера
    -u - отображает время в секундах вместо миллисекунд
    -b IP-адрес - позволяет указать исходящий IP-адрес(в случае нескольких сетевых карт)
@cервер         - @ + IP-адрес или доменное имя DNS-сервера (если не указано - исп DNS-сервер по умолчанию)
доменное_имя    - доменное имя интернет-ресурса, о котором необходимо получить информацию(google.com)
тип_записи      - для какого типа записи необходим вывод A, NS, MX, TXT ... ANY
флаги           - дополнительные команды/фильтры:
    +[no]all        - отображает/скрывает все установленные по умолчанию секции, флаги отображения
    +[no]answer     - отображает только ответ на запрос
    +[no]fail       - должна ли утилита переключаться на следующий DNS сервер, если текущий не отвечает (по умолч +fail)
    +short          - сокращает вывод утилиты
    +[no]cmd        - отключает вывод заголовка и информации об использованных опциях утилиты
    +[no]identify   - используется вместе с флагом +short и отображает информацию об IP-адресе сервера
    +[no]comments   - удаляет все комментарии из вывода утилиты
    +[no]trace      - список DNS серверов через которые прошёл запрос на получ инфо о домене, по умолчанию отключено

Вывод команды, секции:
    HEADER              - версия утилиты, ID запроса, полученные ошибки и использованные флаги вывода
                          выводится и другая важная информация о количестве запросов, обращений к DNS-серверу...
    QUESTION SECTION    - текущий запрос
    ANSWER SECTION      - результат обработки созданного запроса (в данном случае это IP-адрес домена)

Примеры:
    dig naykalab.ru +noall +answer      - вывод только answer секции
    dig google.com MX +noall +answer    - вывод MX-записи домена google.com
    dig naykalab.ru ANY +noall +answer  - все записи
    dig @8.8.8.8 google.com             - использовать ДНС сервер 8.8.8.8
    dig -x 87.250.250.242 +short        - получить домен по ip


--- mtr ----------------------------------------------------------------------------------------------
Объединяя функции ping и traceroute, mtr позволяет постоянно опрашивать удаленный сервер и отслеживать 
изменения задержки и производительности с течением времени, используется протокол icmp

Синтаксис:
mtr [options] host/IP
options:
    -n      IP-адреса вместо имен хостов
    -b      IP-адрес+хост
    -c3     количество пингов, в данном случае 3
    -pc3    интерактивный отчет по каждому запросу(3 запроса)
    -rc3    отчет для файла для 3 пингов(можно менять)
    --tcp   использовать tcp вместо icmp
    --udp   использовать udp вместо icmp
    -m2     максимальное кол-во переходов между хостами
    -s1024  размер пакета
    -4      исп только адреса IPv4

Example:
    mtr -rbc10 naykalab.ru > ping.txt   # отчет в файл


--- Проверка доступрых внутренних/внешних host:port ------------------------------
curl -I http://host[ip]:port        # вернет заголовки ответа от сервера
wget --spider http://host[ip]:port  # проверка на доступность без загрузки сайта
telnet host[ip] port                # сообщение либо о подключении, либо об ошибке
nc -zv host port                    # универсальный инструмент для работы с сетями
nmap -p port host                   # доступность сервера/диапазоны портов


--- curl --------------------------------------------------------------------------
Иинструмент командной строки для работы с URL
curl https://www.google.com                 # вывести в консоль body html ответа
curl -o <file> https://www.google.com       # сохр в свой файл body html ответа
curl -O https://www.google.com/page         # сохр в файл <page> body html ответа
curl -I https://example.com                 # вывести заголовки <head>

--- nmap --------------------------------------------------------------------------
Network Mapper - набор инструментов для сканирования сети
Используется для проверки безопасности, для определения сервисов запущенных на узле,
для идентификации ОС и приложений, типа фаерволла используемого на сканируемом узле

Результаты сканирования:
состояние порта:
    open            приложение готово для соединения, принятия пакетов на этот порт,
                    уязвимые, основная цель сканирования
    closed          доступные, закрытые порты, не связаны с каким-либо приложением на 
                    данный момент, могут быть открыты в будущем. Полезны для определения
                    доступности хоста, ОС, можно сканировать позже, могут открыться
    filtered        nmap не определяет, открыт или закрыт, блокирован, работает 
                    брандмауэр/сетевой фильтр, не достижим, бесполезен
    unfiltered      отвечают на запросы nmap, порт доступен, но не определяются как 
                    закрытые или открытые
    open|filtered   открыт или фильтруется, не определяется наверняка
    closed|filtered закрыт или фильтруется, не определяется наверняка

Синтаксис:
nmap [опции] {цель}
цель:
    hostnames       google.com - обнаруживается ip через dns для сканирования, если
                    ip-ков много - то берется первый, либо ставим опцию --resolve-all
    IP              85.13.152.2 ip2 ... один или несколько IP адресов, выводится инфо
                    для каждого
    networks        192.168.1.0/24, 64.13.0.0.16, microsoft.com/24 если дописать битовую
                    маску - то просканируется вся сеть, допустим /24 - просканирует 255
                    адресов 192.168.0.[любой]/24 - просканирует 192.168.0.0-255
                    /32 - это будет конкретный узел - {192.168.0.229}/32
                    /0  - весь интернет
    diapason        10.0.0-255.1-254 можно задавать диапазон в конкретном месте ip адреса
                    192,172.168,16.0-3.229 - даже так, "192 или 172 . 16 или 168 . 0-3 . 229"
    -iL <file>      можно читать из файла, адреса в любом виде через пробельные символы
    -iR <num>       генерирует произвольные IP кол-во = num и производит scan, если 
                    num = 0 - то генерируется и сканируется бесконечное кол-во хостов
                    nmap -sS -PS80 -iR 0 -p 80 - для сканирования произвольных веб-серверов
                    не генерит частные, широковещательные или нелокализованные диап адресов
    --exclude <h>   исключает адреса, разделённые запятыми, поддерживаются все варианты
    --excludefile   исключает адреса согласно файлу

опции:
    --- доступность хостов ---
    -sL                     Список хостов заданной сети без посылки каких-либо пакетов целевым машинам
                            осуществляется только обратное разрешение DNS - узнаются имена хостов
    
    -sn                     Ping-скан хостов сети, не сканирует порты. Выводятся хосты из заданного
                            диапазона - те которые ответили на ping. Эхо запрос ICMP - посылается SYN
                            на порт 443, ACK на порт 80
                            Под суперюзером дополнительно используется протокол ARP - можно вытащить
                            MAC адреса и узнать активность дополнительных узлов(для лок сети)
    
    -Pn                     Считать все хосты доступными, пропуск обнаруж хоста, сканирует порты,
                            допустим комп не определяется по ICMP, но он доступен - тогда используя
                            этот параметр мы сможем просканировать порты, суперюзер даёт + MAC адрес(лок)
    
    -PS <ports>             Посылается пустой TCP пакет с SYN флагом, по умолчанию порт 80
                            изменить порт например -PS22, несколько портов/диапазоны: PS22-25,80,113
                            Удаленная система получая SYN посылает RST если порт закрыт, 
                            посылает SYN в ответ если порт открыт и система на которой работает nmap
                            посылает в ответ на SYN не ACK, а RST не устанавливая полного соединения
                            Используем sudo для использования row TCP
    
    -PA <ports>             Посылается пустой TCP пакет с ACK флагом, хост принимающий ACK посылает в
                            ответ RST так как соединения такого нет - и выдает свое существование
                            Порт по умолчанию 80, можно менять как в примере с -PS, -PA21
                            Используем sudo
    
    -PU <ports>             Посылается пустой UDP пакет(если не задана опция --data-length), порт
                            по умолчанию 40125, менять можно так же как и в примере с -PS/-PA
                            Обнаруживает доступна ли машина, обходит брэндмауэры блокирующие TCP
                            Используем sudo

    -PY <ports>             Посылается SCTP пакет, ещё один способ пробиться к машине
                            Используем sudo

    -PE/PP/PM               Посылаются ICMP пакет, не так полезно как предыдущие, но бывают полезными
                            ICMP echo, timestamp, netmask - соответственно под каждый параметр
                            Используем sudo

    -PO <protocols>         Обнаружение хостов с пом IP протокола, протокол указываем его номером,
                            формат протоколов как в списке портов в примере с -PS, по умолчанию
                            будут использованы IP пакеты ICMP(1), IGMP(2) и IP-in-IP(4) -PO1,2,4
                            ICMP, IGMP, TCP(6) и UDP(17), SCTP (132) - пакеты посылаются с правильными 
                            заголовками, остал без но можно указ --data, --data-string, --data-length
    
    -PR                     ARP сканирование локальных сетей, более быстрое и надежное чем по IP
                            автоматически используется при сканировании лок сетей, если используются
                            другие команды типа -PS -PE
    
    --disable-arp-ping      Не использовать ARP автоматически в лок сетях при использовании -Pn -PE..
                            пригодится там где используется прокси сервер ARP, создавая видимость того
                            что все целевые объекты работают в соответствии с ARP
    
    --discovery-ignore-rst  В некоторых случаях брандмауэры могут подделывать ответы TCP reset (RST) 
                            в ответ на запросы на незанятые или запрещенные адреса. Поскольку Nmap обычно 
                            рассматривает ответы RST как доказательство того, что цель активна, это
                            может привести к потере времени при сканировании целей, которых там нет. 
                            Использование --discovery-ignore-rst не позволит Nmap учитывать эти ответы во 
                            время обнаружения хоста. Возможно, вам потребуется выбрать дополнительные параметры 
                            обнаружения хоста, чтобы убедиться, что в этом случае вы не пропустите целевые объекты

    --traceroute            отслеживать путь к хосту, не работает с -sT и -sI
    -n                      выкл ДНС имена
    -R                      вкл ДНС имена
    --dns-servers <servers> указать ДНС сервера вместо системного(resolv.conf)

    --- состояние портов ---
    -sS                     TCP SYN это используемый по умолчанию и наиболее популярный тип сканирования,
                            соединение не устанавливается до конца, быстро работает, определяет состояние портов,
                            техника полуоткрытых соединений

    -sT                     TCP(connect) если нет sudo - то эту опцию можно использовать для посылки вместо сырых 
                            пакетов идёт установка с пом OS вызов connect, менее эффективен чем сырые + остаются следы
                            в логах целевой системы
    
    -sU                     UDP сканирование, медленное сканирование
    -sY                     SCTP INIT scan
    -sN/sF/sX               сканирование TCP Null, FIN, and Xmas
    -sA                     TCP ACK scan
    -sW                     TCP Window scan
    -sM                     TCP Maimon scan
    -sZ                     SCTP COOKIE ECHO scan
    
    -sI host:port           незаметное TCP сканирование портов цели, по умолчанию пот 80, указываем хост
                            через который якобы идет скан
    
    -sO <protocol>          Сканирование IP протокола
    -b host                 FTP сканирование, через указанный host(посредник)

    --- определение портов и порядка сканирования ---
    -p                      порт/диапазон портов/тип зависят от типа скана портов -sS -sU...
                            -p22 -p1-65535      порт, диапазон, всё без пробелов(TCP+UDP) 
                            U:53,111,137        udp порты, пока не встретится другой символ
                            T:21-25,80,8080     tcp порты
    
    --exclude-ports         исключить порт/диапазон
    -F                      быстрое сканирование только портов, указанных в nmap-services
    -r                      использовать прямой порядок сканирования, а не дефолтный

    --- обнаружение служб и версий ---
    -sV                     определить версию ПО работающего на портах
    -A                      определить версию ПО + ещё всё остальное
    --version-intensity     аргуменет 1-9, по умолчанию 7, уровень интенсивности
    --version-trace         отладочнуя информация о процессе сканирования

    --- определение ОС ---
    -O                      определять операционную систему
    
    --osscan-limit          использовать функцию определения ОС только для "перспективных" хостов
                            (если найден минимум 1 закрытый + 1 открытый порт), эффективно при множ скан
    
    --osscan-guess/--fuzzy  по умолчанию если определение не точное - угадывать ОС
    
    --- скрипты ---
    -sC                     запускать скрипт по умолчанию для определенной службы = --script=default
    
    расположение:           sudo find /usr/share/nmap/scripts/ -name '*.nse' | grep ssh
    информация о скрипте:   sudo nmap --script-help ftp-brute.nse
    
    --script <категории-скриптов>|<директория>|<имя_файла>|all
                            указать какие скрипты использовать при сканированиии
    
    --script-args           принимает параметры имя=значение - передача аргументов скриптам
    --script-updatedb       обновить базу скриптов scripts/script.db, если были какие-то изменения

    --script-trace          все входящие и исходящие соединения, осуществляемые скриптом, выводятся на экран

    --- скорость ---
    -T[0-5]                 скорость сканирования, чем больше, тем быстрее

    --- Обход Брандмауэров/IDS ---
    -f                      фрагментировать пакеты макс по 8 байт, разбить на мелкие пакеты, не дает определить
                            что мы делаем с целью. Если указать дважды - по 16 байт
                            --send-eth можно указать этот парам, возможно ОС будет сопротивляться разбивать
                            пакеты
    
    --mtu                   не использовать с -f - фрагментировать по заданному кол-ву байт(кратное 8)
    
    -D <IP1,IP2>            маскировка сканирования с помощью фиктивных хостов, будет видно что
                            проводился скан от оного из нескольких IP, включая оригинальный,
                            не работает с -sV

    -S <IP>                 подделать адрес источника, необходимо так же использовать -e -Pn, ответы
                            будут идти как раз поддельному IP, без вывода полезной инфы нам

    -e <iface>              использовать определенный интерфейс(по умолч опред авто)    
    
    --spoof-mac             подделать свой MAC адрес, использовать с --send-eth(пакеты уровня ethernet)              
    
    --badsum                использовать неправильные TCP или UDP контрольные суммы для пакетов, отправляемых 
                            на целевой хост. Т.к. практически все реализации стека IP просто не обрабатывают 
                            такие пакеты, то любые ответы скорее всего приходят от брандмауэров или IDS
    
    --- вывод ---
    -oN file                нормальный вывод в заданный файл, немного отличается от интерактивного вывода
    -oX file                XML вывод
    -v[v]                   уровень детализации
    -d[d]                   уровень отладки
    --append-output         не перезаписывать файл

    --packet-trace          информация о каждом принятом и отправленном пакете
    --open                  показывать только открытые (или возможно открытые) порты
    --iflist                вывести список интерфейсов и роутеров
    --log-errors            ошибки писать не только на экран, но и в файл 
    
    --- дополнительно ---
    -A                      обнаружение операционной системы, определение версии, 
                            сканирование сценариев и трассировка маршрута
    -6                      включает IPv6 сканирование
    
    --send-eth              использовать сырой уровень ethernet
    --send-ip               посылать пакеты с использование сырых IP сокетов


--- tcpdump ----------------------------------------------
Перехват и анализ сетевых пакетов, позволяет просматривать 
все входящие и исходящие из определенного интерфейса

Синтаксис:
tcpdump [опции] [-i интерфейс] [фильтры]
опции:
    -A - выводить все пакеты в формате ASCII;
    -c - закрыть программу после перехвата n-ого количества пакетов;
    -C - при записи пакетов в файл, проверять размер файла, и если он больше заданного - создать новый файл;
    -D - вывести список доступных сетевых интерфейсов;
    -e - выводить информацию уровня соединения для каждого пакета, это может быть полезно, например, для отображения MAC адреса;
    -f - выводить доменное имя для ip адресов;
    -F - читать пакеты из файла, а не интерфейса;
    -G - создавать новый файл лога через указанный промежуток времени;
    -H - обнаруживать заголовки 802.11s;
    -i - имя интерфейса для перехвата пакетов. Вы можете захватывать пакеты со всех интерфейсов, для этого укажите any;
    -I - переключить интерфейс в режим монитора для захвата всех проходящих пакетов;
    -j - установить формат Timestamp для записи пакетов;
    -J - посмотреть доступные Timestamp;
    -K - не проверять контрольные суммы пакетов;
    -l - добавить поддержку прокрутки к выводу;
    -L - вывести поддерживаемые протоколы подключения для интерфейса;
    -n - не отображать доменные имена;
    -r - прочитать пакеты из файла, созданного с помощью -w;
    -v, -vv, -vvv - более подробный вывод;
    -q - выводить минимум информации;
    -w - записать вывод в файл;
    -Z - пользователь, от имени которого будут создаваться файлы.
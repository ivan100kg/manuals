# Maven – Инструмент сборки и управления зависимостями

--- Описание ---
  Maven — система автоматизации сборки и управления зависимостями для Java-проектов.
    - Генерирует структуру проекта
    - Подключает сторонние библиотеки
    - Управляет фазами сборки, плагинами, профилями и настройками

--- Структура проекта ---
  Создать каркас Maven-проекта из CLI:
    mvn archetype:generate
      # выбрать тип архетипа (например: 7 - quickstart)

  Примеры популярных архетипов:
    7. quickstart      – базовый Java-проект
    11. webapp         – шаблон Web-приложения
    ...                – (остальные см. в списке выше)

  Интерактивный ввод параметров:
    groupId     - имя организации:        io.github.ivan100kg
    artifactId  - имя проекта (уник.):    myProject
    version     - версия (по умолчанию):  1.0-SNAPSHOT

  Пример структуры:
    myProject/
    ├── pom.xml
    └── src/
        ├── main/
        │   ├── java/       # *.java исходники
        │   └── resources/  # application.properties и др.
        └── test/
            ├── java/
            └── resources/

--- POM: Project Object Model ---
  Основной конфигурационный файл – `pom.xml`.

  Минимальная структура:
    ```xml
    <project>
        <groupId>...</groupId>
        <artifactId>...</artifactId>
        <version>...</version>
    </project>

    pom.xml -       детальное описание проекта, инфо о различных свойствах,
                    настройка сборки(плагины, цели, профили), наследуемость.
                    Наследуется от Parent pom и переопределяет разл. настройки.
                    Указано лишь то что переопределяется. (размер малый)

    Parent POM -    родительский для всех pom.xml, аналог Object Java.
                    Содержит все настройки по умолчанию. (размер средний)

    effectiv-pom -  огромный размер, все зависимости всех зависимостей расписаны

    Артефакт -      это любая сущность в maven, описывается с помощью:
                    groupId     - пакет, к кот принадл приложение + имя домена
                    artifactId  - уникальный строковый ключ (id проекта)
                    version     - версия проекта (данного артефакта/библиотеки)

    // pom.xml
    <project>
        <!—Описание текущего проекта(обязательная секция) -->
        <groupId>...</groupId>
        <artifactId>...</artifactId>
        <packaging>...</packaging>
        <version>...</version>

        <properties>
            <!-- Секция свойств -->
        </properties>

        <repositories>
            <!-- Секция репозиториев -->
        </repositories>

        <dependencies>
            <!-- Секция зависимостей -->
        </dependencies>

        <build>
            <!-- Секция сборки -->
        </build>
    </project>


--- Properties / свойства(переменные) ---
    Часто встречающиеся параметры Maven позволяет вынести в переменные
    В переменную можно вынести версию Java, версии библиотеки, пути к опред ресурсам ...

    <properties>                                                - блок с переменными
        <junit.version>5.2</junit.version>                      - объявление перем   <--+
        <project.artifactId>new-app</project.artifactId>                                |
        <maven.compiler.source>1.13</maven.compiler.source>                             |
        <maven.compiler.target>1.15</maven.compiler.target>                             |
    </properties>                                                                       |
                                                                                        |
    <version>${junit.version}</version>                         - обращение к перем ----+

    Встроенные свойства проекта(можно писать через project. или pom.):
    ${basedir}  - корневой каталог проекта, где располагается pom.xml
    ${version}	- версия артефакта

    Свойства проекта:
    ${project.build.directory}          - target директория проекта
    ${project.build.outputDirectory}	- target директория компилятора. По умолчанию target/classes
    ${project.name}                     - наименование проекта
    ${project.version}                  - версия проекта

    Свойства настроек:
    ${settings.localRepository}         - какой-то путь определенный в settings.xml


--- Dependency/зависимости (подключение библиотек) ---
    Maven сначала будет искать указанную библиотеку (артефакт) в локальном репозитории
    Если он там ее не найдет, то затем будет искать в глобальном Maven-репозитории
    И потом загрузит ее в твой локальный репозиторий
    
    ~/home/.m2                  - локальный репозиторий
    https://mvnrepository.com/  - центральный пепозиторий Maven где хранятся
                                  все библиотеки
    
    <dependencies>                                  - все зависимости проекта
        <dependency>                                - зависимость(библиотека)
        <groupId>org.springframework</groupId>      - groupId
        <artifactId>spring-core</artifactId>        - artifactId
	    <version>5.3.18</version>                   - version
    </dependency>
    ...
    </dependencies>

    Подключение сторонних репозиториев:
    <repositories>                                  - все стороние репозитории
        <repository>                                - репозиторий
            <id>public-javarush-repo</id>           - Key/ID
            <name>Public JavaRush Repository</name> - Имя
            <url>http://maven.javarush.com</url>    - URL
        </repository>
        ...        
    </repositories>

--- Работа с зависимостями (dependency plugin) ---
mvn dependency:tree                                             # Показать дерево зависимостей
mvn dependency:tree -Dincludes=groupId                          # Фильтрация по группе
mvn dependency:tree -Dincludes=groupId:artifactId               # Фильтрация по артефакту
mvn dependency:tree -Dverbose                                   # Найти конфликты / дубли
mvn dependency:tree -Dscope=runtime                             # Показывать зависимости указанного scope
mvn dependency:tree -DoutputType=dot                            # Вывод в формате DOT (для графов)

mvn dependency:list                                             # Список всех зависимостей
mvn dependency:list -DincludeScope=compile                      # Список зависимостей с указанным scope
mvn dependency:list -DexcludeTransitive=true                    # Исключить транзитивные зависимости

mvn dependency:analyze                                          # Необъявленные / неиспользуемые зависимости
mvn dependency:analyze-only                                     # Анализ без сборки
mvn dependency:analyze-duplicate                                # Найти дублирующие зависимости

mvn dependency:resolve                                          # Скачать зависимости (без сборки)
mvn dependency:resolve-plugins                                  # Скачать зависимости плагинов

mvn help:effective-pom                                          # Проверка финального pom (всё в одном)
mvn help:effective-settings                                     # Проверка финальных настроек
mvn versions:display-dependency-updates                         # Показ новых версий зависимостей
mvn versions:display-plugin-updates                             # Показ новых версий плагинов

mvn dependency:get -Dartifact=groupId:artifactId:version        # Скачать зависимость вручную
mvn dependency:copy -Dartifact=groupId:artifactId:version       # Скачать и скопировать зависимость в target
mvn dependency:purge-local-repository -DreResolve=false         # Удалить зависимость из локального кеша

    
--- Фазы сборки проекта ---
    1	validate	проверяет корректность метаинформации о проекте
    2	compile	    компилирует исходники
    3	test	    прогоняет тесты классов из предыдущего шага
    4	package	    упаковывает скомпилированные классы в новый артефакт: jar, war, zip, …
    5	verify	    проверяет корректность артефакта и удовлетворение требованиям качества
    6	install	    кладет артефакт в локальный репозиторий
    7	deploy	    заливает артефакт на production-сервер или удаленный репозиторий


--- Циклы работы/Lifecycles ---
    Все команды maven делятся на три группы – lifecycles.
    Их называют жизненными циклами, так как они задают порядок фаз,
    которые выполняются во время сборки или определенного жизненного цикла,
    потому что не все действия Maven являются сборкой.
    
    цикл        | Фаза                   | Описание   
    ------------+------------------------+---------------------------
    clean       | pre-clean              | очистка директории /target
                | clean                  |
                | post-clean             |
    ------------+------------------------+---------------------------
    default     | validate               | сборка проекта
                | generate-sources       | - сгенерировать Java-код на основе xml
                | process-sources        |
                | generate-resources     |
                | process-resources      |
                | compile                |
                | process-test-sources   |
                | process-test-resources |
                | test-compile           |
                | test                   |
                | package                |
                | install                |
                | deploy                 |
    ------------+------------------------+---------------------------
    site        | pre-site               | автоматическая генерация
                | site                   | документации по проекту
                | post-site              |
                | site-deploy            |

    Стандартные жизненные циклы могут быть дополнены функционалом с помощью Maven-плагинов


--- build, настройка сборки ---
    Секция содержит основную информацию по сборке: где расположены Java-файлы,
    файлы ресурсов, какие плагины используются, куда складывать собранный проект
    
    <build>
        <finalName>projectName</finalName>
        <sourceDirectory>${basedir}/src/java</sourceDirectory>
        <outputDirectory>${basedir}/targetDir</outputDirectory>
        <resources>
            <resource>
                <directory>${basedir}/src/java/resources</directory>
                <includes>
                    <include>**/*.properties</include>  - ** - любое кол-во дир-ий
                </includes>
            </resource>
        </resources>
        <plugins>
                . . .
        </plugins>
    </build>

    <finalName>         - имя результирующего файла сборки (jar, war, ear..), 
                          который создается в фазе package. Если параметр не задан,
                          то используется значение по умолчанию — artifactId-version
    <sourceDirectory>   - переопределить месторасположения файлов с исходным кодом. 
                          По умолчанию файлы в ${basedir}/src/main/java
    <outputDirectory>   - куда компилятор будет сохранять результаты 
                          компиляции - *.class файлы. По умолчанию target/classes
    <resources>         - и вложенные в нее тэги <resource> определяют местоположение
                          файлов ресурсов. Файлы ресурсов при сборке просто копируются
                          в директорию outputDirectory. Значение по умолчанию 
                          директории с ресурсами равно src/main/resources


--- Plugin/Плагины ---
    Плагины позволяют вставлять в стандартный цикл новые шаги
    (например, распределение на сервер приложений) или расширять существующие шаги
    Можно указывать какой плагин запускать, в какой фазе и с какими параметрами

    <build>                                                         - корень
      <plugins>                                                     - все плагины
        <plugin>                                                    - плагин
          <groupId>org.apache.maven.plugins</groupId>               - groupId
          <artifactId>maven-dependency-plugin</artifactId>          - artifactId
          <version>3.0.2</version>                                  - version
          <executions>
            <execution>
              <phase>install</phase>                                - фаза
              <goals>                                               - цели
                <goal>copy-dependencies</goal>                      - цель
              </goals>
              <configuration>                                       - конфиг
                <outputDirectory>${project.build.directory}/lib</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
        ...
      </plugins>
    </build>


--- плагины для сборки ---
    Все полные возможности плагинов смотреть на https://maven.apache.org/plugins/

    maven-compiler-plugin	    Управляет Java-компиляцией, различные манипуляции
                                можно передавать различные параметры комп-ру,
                                память, версия Java, связка с фазами ...
    maven-resources-plugin	    Управляет включением ресурсов в сборку
    maven-source-plugin	        Управляет включением исходного кода в сборку
    maven-dependency-plugin     Управляет процессом копирования библиотек зависимостей
    maven-jar-plugin	        Плагин для создания итогового jar-файла(библиотеки)
                                необходимо создать манифест и указать путь до него,
                                либо можно авто генерировать манифест(<manifest>),
                                выбор файлов попадающих в jar, главный класс ...
    maven-war-plugin	        Плагин для создания итогового war-файла
    maven-surefire-plugin	    Управляет запуском тестов
    buildnumber-maven-plugin	Генерирует номер сборки
    maven-shade-plugin          Создать толстый jar с библиотеками внутри


--- jar war ---
    jar-файл может запустить просто java-машина
    war-файл нужно загрузить на веб-сервер. Самостоятельно он не запускается
    
    jar-библиотека (Java Archive) - это просто zip архив содержит:
        - скомпилированные классы
        - ресурсы: properties-файлы и тому подобное
        - манифест MANIFEST.MF
        - другие jar-библиотеки (редко)

    Cтруктура архива jar:
        META-INF/
            MANIFEST.MF
        com/
            javarush/
                MyApplication.class
        application.properties

    war-файл (Web Archive) - тоже просто архив, содержит:
        Java-часть:
            - скомпилированные классы
            - ресурсы для java-классов: properties-файлы и тому подобное
            - другие jar-библиотеки (часто)
            - манифест MANIFEST.MF
        Web-часть:
            - web-xml – дескриптор развертывания веб-сервиса
            - jsp-сервелеты
            - статические веб-ресурсы: HTML, CSS, JS-файлы
    
    Пример типичного war-файла:
    META-INF/
        MANIFEST.MF
    WEB-INF/
        web.xml
        jsp/
            helloWorld.jsp
        classes/
            static/
            templates/
            application.properties
        lib/
            // *.jar files as libs


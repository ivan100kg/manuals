Алгоритм - набор инструкций для выполнения задачи

О - время выполнения алгоритма - описыв-ся ростом количества оперц.
Описывает скорость в худшем случае работы алгоритма.

# Типичные примеры О большого(есть и другие):
# n - количество элементов
O(log n)     # логарифмическое время(бинарный поиск)
O(n)         # линейное время(простой поиск)
O(n * log n) # эф-е алгоритмы(быстрая сортировка)
O(n**2)      # медленные алг сорт(сортировка выбором)
O(n!)        # факториальное время, оч медленные алг

# Алгоритмы поиска
# Бинарный поиск - поиск в отсортированном массиве, O(log n)
def binary_search(items_list, item):
    """на вход подаётся отсортированный список и значение"""
    low = 0
    high = len(items_list) - 1
    while low <= high:
        mid = (low + high) // 2
        guess = items_list[mid]
        if guess == item:
            return mid
        elif item > guess:
            low = mid + 1
        else:
            high = mid - 1
    return None

+-------+-------+------+
|операц |массивы|списки|  O(n) - линейное время
+-------+-------+------+  O(1) - постоянное время
|чтение | O(1)  |O(n)  |  вставка/удаление - первый|последний элем
|вставка| O(n)  |O(1)  |
|удален | O(n)  |O(1)  |
+-------+-------+------+

Массивы идеальны для чтения
Списки идеальны для записи/удаления

# Сортировка выбором: скорость O(n**2)
def smallest(arr):
    small_val = arr[0]
    small_ind = 0
    for i in range(1, len(arr)):
        if arr[i] < small_val:
            small_val = arr[i]
            small_ind = i
    return small_ind

def selectionSort(arr):
    sortArr = []
    for i in range(len(arr)):
        small_ind = smallest(arr)
        sortArr.append(arr.pop(small_ind))
    return sortArr

# Рекурсивная функция
Базовый возврат из функции
Рекурсивный случай - вызов самой себя
Все вызовы хранятся в стеке

# Алгоритм быстрой сортировки, разделяй и властвуй.
# Время O(n**2), среднее O(n *logn)
def quicksort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less  = [i for i in arr[1:] if i ≤ pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)


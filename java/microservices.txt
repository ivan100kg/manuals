Микросервисы

Небольшие автономные сервисы, которые работают совместно.
Разработка отдельного приложения в виде набора небольших сервисов,
каждый из которых работает в своем собственном процессе и взаимодействует 
с облегченными механизмами, часто API-интерфейсом HTTP-ресурсов.
Микросервисы объединены с помощью облака в одно виртуальное приложение.

Облачные вычисления:
это оказание вычислительных и виртуализированных ИТ-услуг – баз данных,
сетей, программных продуктов, серверов, аналитики и много другого – 
через интернет для предоставления гибкого, безопасного и простого 
в использовании окружения.

Модели облачных вычислений(различаются уровнем контроля):
    IaaS - Инфраструктура как услуга (Infrastructure as a Service)
    CaaS - Контейнер как услуга (Container as a Service)
    PaaS - Платформа как услуга (Platform as a Service)
    FaaS - Функция как услуга (Function as a Service)
    SaaS - Программное обеспечение как услуга (Software as a Service)

                                    лок сервер Iaas Caas Paas Faas Saas
    -------------------------------------------------------------------
    5 функции                           +      +    +    +    +
    4 приложения                        +      +    +    +
    3 Среда выполнения и контейнеры     +      +    +
    2 ОС и инструменты управления       +      +
    1 Сеть, хранилища, сервисы          + 
    0 Вычислительный центр              +


--- Spring Cloud ------------------------------------------------------

Service Discovery - паттерн как организовать работу микросервисов
Eureka Netflix - решение на соснове паттерна
Spring Cloud Service Discovery(Service Registry/Spring Eureka server) - реестр микросервисов(сервер)

Состав приложения на микросервисах:
Микросервисы
    Приложения в которых реализованы сервисы
Spring Eureka Server
    Контейнер микросервисов в этот реестр регистрируются все микросервисы, которые находятся в едином облаке
Spring API Gateway
    Балансировщик нагрузки и маршрутизатор запросов. Через этот шлюз идут запросы от клиента к контейнеру сервисов
Spring Cloud Config
    Настройки приложений - хранятся в облаке


Structure:
                 Mobile / Browser                   - клиент
                        |
                        v
            Api Gateway (Springboot app)            - маршрутизатор, направляет запросы в нужный микросервис
            /           |           \
    Config Server       |       Discovery server    - Discovery server - хранит url и названия микросервисов
    (Springboot app)    |       (Springboot app)    - Config Server - конфиги микросервисов
                        |
        +----------+----+------+-----------+
        |          |           |           |
        v          v           v           v
      micro1     micro2      micro3      micro4     микросервисы
        |          |           |           |
        v          v           v           v
       db1        db2         db3         db4       БД у каждого своя база даных, без доступа из вне

Общение между сервисами:
    HTTP    - webclient, restTemplate
    gRPC    - google http2.0
    Kafka   - лучший выбор для общения между сервисами
              не нужно настраисать коннект к каждому сервису
              не теряется не доставленные сообщения
              не нужно конфигурировать отправитея заново функционал при добавлении нового мс(получателя)
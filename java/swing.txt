Компонент - визуальный элемент(кнопка, ползунок...)
Контейнер - спец компонент, который может вмещать другие компоненты
Для отображения компонентов их необходимо поместить в контейнер

Контейнеры верхнего уровня: JFrame, JApplet, JWindow и JDialog. Наследуются
от Component и Container из библиотеки АWT. Должны находиться на верхнем
уровне иерархии.

Контейнеры не верхнего уровня(легковесные) наследуются от JComponent, 
пример JPanel - контейнер общего назначения, могут быть вложенными.

Компоненты наследуются от JComponent, их названия начинаются с 'J'

Панели - Каждый контейнер верхнего уровня определяет ряд панелей.
JRootPanel - корневая панель всех панелей. Это легковесный контейнер предназнач для 
управления др панелями.
Панели, составляющие корневую панель, называются прозрачной панелью, панелью содержимого
и многослойной панелью соответственно.
JPanel - прозрачная панель верхнего уровня, находится над всеми панелями и покрывает их,
позволяет управлять событиями мыши, оказ влияние на весь контейнер в целом.
JLayeredPane - многослойная панель, позволяет задать определенную глубину размещ комп-в,
глубина определяет степень перекрытия компонентов(по координате Z). На многослойной панели
находится панель содержимого и дополнительно, хотя и не обязательно - строка меню.
Jpanel - панель содержимого, на ней располагаются визуальные компоненты, когда компонент
добавляется в контейнер верхнего уровня - он попадает на панель содержимого.

public class Swing1 extends JFrame{
    public Swing1() {
        super("my app");                                        // title
        super.setBounds(200, 200, 300, 200);                    // loc, size
        super.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   // when close
        
        // получаем панель содержимого типа Container
        Container container = super.getContentPane();           // container
        container.setLayout(new GridLayout(3,2,2,2));           // layout

        // метка - создать и добавить в конт
        JLabel jlab = new JLabel("My label");                   // label
        container.add(jlab);                                    // add to container
        
    }
    
    public static void main(String[] args) {
        Swing1 swing1 = new Swing1();                           // run
        swing1.setVisible(true);                                // visible
        
    }

}

// Example #2
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author BondarevIY
 */
public class EventDemo {
    JLabel jlab;

    public EventDemo() {
        // container
        JFrame jfrm = new JFrame("Event Example");
        
        // диспетчер поточной компоновки типа FlowLayout
        jfrm.setLayout(new FlowLayout());
        
        // исх размеры фрейма
        jfrm.setSize(220, 90);
        
        // завершить работу приложения если пользователь закрыв окно
        jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // 2 buttons
        JButton jbtnAlpha = new JButton("Alpha");
        JButton jbtnBeta = new JButton("Beta");
        
        // ввести приемник действий от кнопки Альфа
        jbtnAlpha.addActionListener(() -> jlab.setText("Alpha pressed"));
        
        // ввести приемник действий от кнопки Альфа
        jbtnBeta.addActionListener(() -> jlab.setText("Beta pressed"));
        
        // ввести кнопки на панель содержимого
        jfrm.add(jbtnAlpha);
        jfrm.add(jbtnBeta);
        
        // создать метку, добавить в панель
        jlab = new JLabel("Press a button");
        jfrm.add(jlab);
        
        // отобразить фреймы
        jfrm.setVisible(true);                
    }
     
    public static void main(String[] args) {
        // создать фрейм в потоке диспетчеризации событий
        SwingUtilities.invokeLater(() -> new EventDemo());
        
    }
            
}

Рисование
    Наследуем класс от JPanel
    Переопределяем метод paintComponent(Graphics g)
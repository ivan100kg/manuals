JUnit5

Уровни тестирования:
    1. Unit testing         - тестирование функции, изоляция от др компонентов
    2. Integration testing  - несколько функций(units) вместе
    3. Acceptance testing   - все прилож в целом(функциональное тестирование)

JUnit5 состоит из подпроектов:
    JUnit Platform          - запуск тестов на JVM, консоли, IDE
    JUnit Jupiter           - набор классов для написания тестов
    JUnit Vintage           - обрат совместимость со старыми версиями

Maven зависимости:
    junit-jupiter-engine    - включает все зависимости(api,platform)

Example:
    public class AppTest {  - тест-класс класса App, обычно так называют
        @Test               - методы с такой аннотацией учавствуют в тестах
        void userEmptyIfNoUserAdded() {                 - пр-ка метода getAll
        App app = new App();                                
        Assertions.assertTrue(app.getAll().isEmpty());  - класс с ассертами

Assertions:
    assertTrue(booleean, String)    - можно передавать String(вывод в случ ош)
    assertFalse(booleean)           - ожидается ложь
    assertEquals(expected, actual)  - ожидалось, получено
    assertArrayEquals()             - ожидалось, получено для массивов/коллекц
    assertAll()                     - неск ассертов в методе
    assertThrows()                  -
    ...
    Во всех ассертах можно передавать вторым значением строку для уточнения
    ошибки при выполнении ассерта.

Life cycle:
    @BeforeAll -> @BeforeEach -> @Test -> @AfterEach -> @AfterAll
                       <-----------------------+
    Можно с пом аннотаций перед каждым тестом и после вып какие-то действия.
    Также можо что-то вып перед всеми тестами и после всех(static).
    
    public class AppTest {
        private App app;    

        @BeforeAll
        static void before() {
            System.out.println("Before all");
        }

        @BeforeEach
        void beforeEach() {
            app = new App();
            System.out.println("Before each: " + this);
        }

        @Test
        void userEmptyIfNoUserAdded() {
            System.out.println("Test1: " + this);
            Assertions.assertTrue(app.getAll().isEmpty());
        }

        @Test
        void usersSizeIfUserAdded() {
            System.out.println("Test2: " + this);
            app.add(new User());
            app.add(new User());
            Assertions.assertEquals(2, app.getAll().size());
        }

        @AfterEach
        void afterEach() {
            System.out.println("After each: " + this + "\n");
        }

        @AfterAll
        static void after() {
            System.out.println("After all");
        }
    }

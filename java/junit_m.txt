JUnit5

Уровни тестирования:
    1. Unit testing         - тестирование функции, изоляция от др компонентов
    2. Integration testing  - несколько функций(units) вместе
    3. Acceptance testing   - все прилож в целом(функциональное тестирование)

JUnit5 состоит из подпроектов:
    JUnit Platform          - запуск тестов на JVM, консоли, IDE
    JUnit Jupiter           - набор классов для написания тестов
    JUnit Vintage           - обрат совместимость со старыми версиями

Maven зависимости:
    junit-jupiter-engine    - включает все зависимости(api,platform)
    junit-platform-launcher - для своего launcher
    spring-boot-starter-test  для spring-boot

Example:
    public class AppTest {  - тест-класс класса App, обычно так называют
        @Test               - методы с такой аннотацией учавствуют в тестах
        void userEmptyIfNoUserAdded() {                 - пр-ка метода getAll
        App app = new App();                                
        Assertions.assertTrue(app.getAll().isEmpty());  - класс с ассертами

Assertions:
    assertTrue(booleean, String)    - можно передавать String(вывод в случ ош)
    assertFalse(booleean)           - ожидается ложь
    assertEquals(expected, actual)  - ожидалось, получено
    assertArrayEquals()             - ожидалось, получено для массивов/коллекц
    assertAll()                     - неск ассертов в методе
    assertThrows(Excep.class, lamb) - класс ошибки и код завернуть в lambda
    assertNull()                    - null - right
    ...
    Во всех ассертах можно передавать вторым значением строку для уточнения
    ошибки при выполнении ассерта.

Life cycle:
    @BeforeAll -> @BeforeEach -> @Test -> @AfterEach -> @AfterAll
                       <-----------------------+
    Можно с пом аннотаций перед каждым тестом и после вып какие-то действия.
    Также можо что-то вып перед всеми тестами и после всех(static).
    
    public class AppTest {
        private App app;    

        @BeforeAll
        static void before() {
            System.out.println("Before all");
        }

        @BeforeEach
        void beforeEach() {
            app = new App();
            System.out.println("Before each: " + this);
        }

        @Test
        void userEmptyIfNoUserAdded() {
            System.out.println("Test1: " + this);
            Assertions.assertTrue(app.getAll().isEmpty());
        }

        @Test
        void usersSizeIfUserAdded() {
            System.out.println("Test2: " + this);
            app.add(new User());
            app.add(new User());
            Assertions.assertEquals(2, app.getAll().size());
        }

        @AfterEach
        void afterEach() {
            System.out.println("After each: " + this + "\n");
        }

        @AfterAll
        static void after() {
            System.out.println("After all");
        }
    }

Свой Launcher:
    Тесты запускаются с помощью лаунчера, под капотом Idea/Maven использует его,
    можно создать свой лаунчер и запустить тесты.
    public class TestLauncher {
        public static void main(String[] args) {
            Launcher launcher = LauncherFactory.create();
            SummaryGeneratingListener listener = new SummaryGeneratingListener();
            LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder
                    .request()
                    .selectors(DiscoverySelectors.selectPackage("io.github.ivan100kg"))
                    .build();
            launcher.execute(request,listener);
            listener.getSummary().printTo(new PrintWriter(System.out));
        }
    }

Spring Boot MVC test
    тестирование главной страницы spring-boot MVC приложения, а именно
    класса-контроллера, метода обработки главной страницы на url "/".

    // контроллер
    @Controller
    public class HomeController {
        @GetMapping("/")
        public String home() {
            return "home";
        }
    }

    // view (Thymeleaf)
    документ .html положить в resources/templates
    картинку в resources/static/images
    th:src - Thymeleaf-атрибут и выражение @{...} описывает ссылку на 
    изображение с контекстно-зависимым путем.
    
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8"
            xmlns="http://www.w3.org/1999/xhtml"
            xmlns:th="http://www.thymeleaf.org">
        <title>home</title>
    </head>
    <body>
        <h1>Welcome to...</h1>
        <img th:src="@{/images/action.png}">
    </body>
    </html>

    // test
    @WebMvcTest. Это специальная тестовая аннотация из Spring
    Boot, которая организует запуск теста в контексте приложения Spring
    MVC. В данном случае она обеспечивает регистрацию класса Home-Controller 
    в Spring MVC, чтобы дать возможность отправлять ему запросы.
    MockMvc - объект для имитации механики Spring MVC (без запувка Tomcat)
    testHomePage() - определяет тест для проверки дом страницы(GET "/"),
    ожидается следущее:
        ответ должен иметь статус HTTP 200 (ОК);
        представление должно иметь логическое имя home;
        получившаяся страница должна содержать текст «Welcome to...».

    import org.junit.jupiter.api.Test;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
    import org.springframework.test.web.servlet.MockMvc;
    import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

    @WebMvcTest
    public class HomeControllerTest {
        @Autowired
        private MockMvc mockMvc;

        @Test
        public void testHomePage() throws Exception {
            mockMvc.perform(MockMvcRequestBuilders.get("/"))
                    .andExpect(status().isOk())
                    .andExpect(view().name("home"))
                    .andExpect(content().string(org.hamcrest.Matchers.containsString(
                            "Welcome to..."
                    )));
        }
    }
 
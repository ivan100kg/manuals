# Maven

--- Описание ---
    Maven - framework для автоматизации сборки проектов
    Позволяеет генерировать каркас проекта
    Управляет зависимостями как внутри проекта, так и импорта сторонних
    библиотек из огромного репозитория


--- Структура проекта ---
    Создать структуру проекта из консоли:
    mvn archetype:generate [n]  // generate the project, n - id архетипа
    виды архетипов:
        1.  archetype	sample archetype project
        2.  j2ee-simple	simplifed sample J2EE application
        3.  mojo	    sample a sample Maven plugin
        4.  plugin	    sample Maven plugin
        5.  plugin-site	sample Maven plugin site
        6.  portlet	    sample JSR-268 Portlet
        7.  quickstart  sample Maven project
        8.  simple	    simple Maven project
        9.  site	    sample Maven site
        10. site-simple	sample Maven site
        11. webapp	    sample Maven Webapp project
    далее ввод доп параметров интерактивно:
        groupId         название организации  - io.github.ivan100kg
        artifactId      уник название проекта - myProject
        version         оставляем по умолч    - 1.0-SNAPSHOT (SNAPSHOT - в разраб)

    создастся примерно такая структура проекта:
        myProject
        ├── pom.xml                         инфо о проекте
        └── src                             исходники(основные и для тестирования)
            ├── main                        исходники проекта
            │   ├── java                    корень для всех Java-классов проекта
            │   │   └── mygroup             пакеты проекта
            │   │       └── App.java        классы проекта
            │   └── resources               ресурсы проекта
            └── test                        тесты, аналогичная структура как и main
                ├── java
                │   └── mygroup
                │       └── AppTest.java
                └── resources
    

--- Project Object Model ---
    pom.xml -       детальное описание проекта, инфо о различных свойствах,
                    настройка сборки(плагины, цели, профили), наследуемость.
                    Наследуется от Parent pom и переопределяет разл. настройки.
                    Указано лишь то что переопределяется. (размер малый)

    Parent POM -    родительский для всех pom.xml, аналог Object Java.
                    Содержит все настройки по умолчанию. (размер средний)

    effectiv-pom -  огромный размер, все зависимости всех зависимостей расписаны

    Артефакт -      это любая сущность в maven, описывается с помощью:
                    groupId     - пакет, к кот принадл приложение + имя домена
                    artifactId  - уникальный строковый ключ (id проекта)
                    version     - версия проекта (данного артефакта/библиотеки)

    // pom.xml
    <?xml version="1.0" encoding="UTF-8"?>                  
    <project xmlns="http://maven.apache.org/POM/4.0.0"      
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        
        <modelVersion>4.0.0</modelVersion>

        <groupId>io.github.ivan100kg</groupId>
        <artifactId>myProject</artifactId>
        <version>1.0-SNAPSHOT</version>

        <name>my-app</name>
        <url>http://www.example.com</url>

        <properties>    // свойства
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>

        <repositories>  // сторонние репозитории помимо глобального Maven-репозитория
            <repository>
                <id>public-javarush-repo</id>
                <name>Public JavaRush Repository</name>
                <url>http://maven.javarush.com</url>
            </repository>
            
            <repository>
                <id>private-javarush-repo</id>
                <name>Private JavaRush Repository</name>
                <url>http://maven2.javarush.com</url>
            </repository>
        </repositories>

        <dependencies>  // зависимости 
            <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
            </dependency>
        </dependencies>
        
        <build>         // плагины
            <pluginManagement><!-- lock down plugins versions to avoid using 
            Maven defaults (may be moved to parent pom) -->
            ... lots of helpful plugins
            </pluginManagement>
        </build>
    </project> 
    
    
    <?xml>          - тэг xml, тип документа
    <project>       - главный тэг для всех, аттрибуты - всякие правила для xml

    <?xml>          - тэг xml, тип документа
    <project>       - главный тэг для всех, аттрибуты - всякие правила для xml


--- Dependency/зависимости (подключение библиотек) ---
    Maven сначала будет искать указанную библиотеку (артефакт) в локальном репозитории
    Если он там ее не найдет, то затем будет искать в глобальном Maven-репозитории
    И потом загрузит ее в твой локальный репозиторий
    
    ~/home/.m2                  - локальный репозиторий
    https://mvnrepository.com/  - центральный пепозиторий Maven где хранятся
                                  все библиотеки
    
    <dependencies>                                  - все зависимости проекта
        <dependency>                                - зависимость(библиотека)
        <groupId>org.springframework</groupId>      - groupId
        <artifactId>spring-core</artifactId>        - artifactId
	    <version>5.3.18</version>                   - version
    </dependency>
    ...
    </dependencies>

    Подключение сторонних репозиториев:
    <repositories>                                  - все стороние репозитории
        <repository>                                - репозиторий
            <id>public-javarush-repo</id>           - Key/ID
            <name>Public JavaRush Repository</name> - Имя
            <url>http://maven.javarush.com</url>    - URL
        </repository>
        ...        
    </repositories>
    
    
--- Фазы сборки проекта ---
    1	validate	проверяет корректность метаинформации о проекте
    2	compile	    компилирует исходники
    3	test	    прогоняет тесты классов из предыдущего шага
    4	package	    упаковывает скомпилированные классы в новый артефакт: jar, war, zip, …
    5	verify	    проверяет корректность артефакта и удовлетворение требованиям качества
    6	install	    кладет артефакт в локальный репозиторий
    7	deploy	    заливает артефакт на production-сервер или удаленный репозиторий


--- Циклы работы/Lifecycles ---
    Все команды maven делятся на три группы – lifecycles.
    Их называют жизненными циклами, так как они задают порядок фаз,
    которые выполняются во время сборки или определенного жизненного цикла,
    потому что не все действия Maven являются сборкой.
    
    цикл        | Фаза                   | Описание   
    ------------+------------------------+---------------------------
    clean       | pre-clean              | очистка директории /target
                | clean                  |
                | post-clean             |
    ------------+------------------------+---------------------------
    default     | validate               | сборка проекта
                | generate-sources       | - сгенерировать Java-код на основе xml
                | process-sources        |
                | generate-resources     |
                | process-resources      |
                | compile                |
                | process-test-sources   |
                | process-test-resources |
                | test-compile           |
                | test                   |
                | package                |
                | install                |
                | deploy                 |
    ------------+------------------------+---------------------------
    site        | pre-site               | автоматическая генерация
                | site                   | документации по проекту
                | post-site              |
                | site-deploy            |

    Стандартные жизненные циклы могут быть дополнены функционалом с помощью Maven-плагинов


--- Plugin/Плагины ---
    Плагины позволяют вставлять в стандартный цикл новые шаги 
    (например, распределение на сервер приложений) или расширять существующие шаги
    Можно указывать какой плагин запускать, в какой фазе и с какими параметрами

    <build>                                                         - корень
      <plugins>                                                     - все плагины
        <plugin>                                                    - плагин
          <groupId>org.apache.maven.plugins</groupId>               - groupId
          <artifactId>maven-dependency-plugin</artifactId>          - artifactId
          <version>3.0.2</version>                                  - version
          <executions>
            <execution>
              <phase>install</phase>                                - фаза
              <goals>                                               - цели
                <goal>copy-dependencies</goal>                      - цель
              </goals>
              <configuration>                                       - конфиг
                <outputDirectory>${project.build.directory}/lib</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
        ...
      </plugins>
    </build>
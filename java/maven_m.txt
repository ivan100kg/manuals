# Maven

Описание
    Maven - framework для автоматизации сборки проектов
    Позволяеет генерировать каркас проекта
    Управляет зависимостями как внутри проекта, так и импорта сторонних
    библиотек из огромного репозитория

Локальный репозиторий Maven
    ~/home/.m2

--- Структура проекта ---
    Создать структуру проекта из консоли:
    mvn archetype:generate [n]  // generate the project, n - id архетипа
    виды архетипов:
        1.  archetype	sample archetype project
        2.  j2ee-simple	simplifed sample J2EE application
        3.  mojo	    sample a sample Maven plugin
        4.  plugin	    sample Maven plugin
        5.  plugin-site	sample Maven plugin site
        6.  portlet	    sample JSR-268 Portlet
        7.  quickstart  sample Maven project
        8.  simple	    simple Maven project
        9.  site	    sample Maven site
        10. site-simple	sample Maven site
        11. webapp	    sample Maven Webapp project
    далее ввод доп параметров интерактивно:
        groupId         название организации  - io.github.ivan100kg
        artifactId      уник название проекта - myProject
        version         оставляем по умолч    - 1.0-SNAPSHOT (SNAPSHOT - в разраб)

    создастся примерно такая структура проекта:
        myProject
        ├── pom.xml                         инфо о проекте
        └── src                             исходники(основные и для тестирования)
            ├── main                        исходники проекта
            │   ├── java                    корень для всех Java-классов проекта
            │   │   └── mygroup             пакеты проекта
            │   │       └── App.java        классы проекта
            │   └── resources               ресурсы проекта
            └── test                        тесты, аналогичная структура как и main
                ├── java
                │   └── mygroup
                │       └── AppTest.java
                └── resources
    

--- Project Object Model ---
    pom.xml -       детальное описание проекта, инфо о различных свойствах,
                    настройка сборки(плагины, цели, профили), наследуемость.
                    Наследуется от Parent pom и переопределяет разл. настройки.
                    Указано лишь то что переопределяется. (размер малый)

    Parent POM -    родительский для всех pom.xml, аналог Object Java.
                    Содержит все настройки по умолчанию. (размер средний)

    effectiv-pom -  огромный размер, все зависимости всех зависимостей расписаны

    Артефакт -      это любая сущность в maven, описывается с помощью:
                    groupId     - пакет, к кот принадл приложение + имя домена
                    artifactId  - уникальный строковый ключ (id проекта)
                    version     - версия проекта 

    // pom.xml
    <?xml version="1.0" encoding="UTF-8"?>                  
    <project xmlns="http://maven.apache.org/POM/4.0.0"      
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        
        <modelVersion>4.0.0</modelVersion>

        <groupId>io.github.ivan100kg</groupId>
        <artifactId>myProject</artifactId>
        <version>1.0-SNAPSHOT</version>

        <name>my-app</name>
        <url>http://www.example.com</url>

        <properties>    // свойства
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>

        <repositories>  // сторонние репозитории помимо глобального Maven-репозитория
            <repository>
                <id>public-javarush-repo</id>
                <name>Public JavaRush Repository</name>
                <url>http://maven.javarush.com</url>
            </repository>
            
            <repository>
                <id>private-javarush-repo</id>
                <name>Private JavaRush Repository</name>
                <url>http://maven2.javarush.com</url>
            </repository>
        </repositories>

        <dependencies>  // зависимости 
            <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
            </dependency>
        </dependencies>
        
        <build>         // плагины
            <pluginManagement><!-- lock down plugins versions to avoid using 
            Maven defaults (may be moved to parent pom) -->
            ... lots of helpful plugins
            </pluginManagement>
        </build>
    </project> 
    
    <?xml>          - тэг xml, тип документа
    <project>       - главный тэг для всех, аттрибуты - всякие правила для xml

    <modelVersion>  - версия POM, не меняется после создания
    <groupId>       - пакет+домен - io.github.ivan100kg
    <artifactId>    - уник название проекта - myProject
    <version>       - номер нашей версии проекта - 5.0-RELEASE

    project         - the top-level element in all Maven pom.xml files.
    groupId         - the unique identifier of the organization or group.
    artifactId      - the unique base name of the primary artifact.
    version         - version of the artifact generated by the project.
    name            - the display name used for the project.
    url             - where the project's site can be found.
    properties      - contains value placeholders accessible anywhere within a POM.
    dependencies    - children list dependencies. The cornerstone of the POM.
    build           - your project's directory structure and managing plugins.


--- Фазы сборки проекта ---
    0   clean       
    1	validate	проверяет корректность метаинформации о проекте
    2	compile	    компилирует исходники
    3	test	    прогоняет тесты классов из предыдущего шага
    4	package	    упаковывает скомпилированные классы в новый артефакт: jar, war, zip, …
    5	verify	    проверяет корректность артефакта и удовлетворение требованиям качества
    6	install	    кладет артефакт в локальный репозиторий
    7	deploy	    заливает артефакт на production-сервер или удаленный репозиторий


Deploy:
    ~/.m2/settings.xml
    или
    /etc/maven/settings.xml
    Вставить блок:
    <servers>
    <server>
        <id>myServer</id>
        <username>tomcat</username>
        <password>*******</password>
        </server>
    </servers>

    pom.xml
    <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
            <url>http://172.16.0.246:8080/manager/text</url>
            <server>naukaServer</server>
            <path>/medserver${tomcatPathSuffix}##${project.version}</path> <-+ 
        </configuration>             +                      +--------------+
    </plugin>                        |                                     |
                                     +---------------------------------+   |
    <version>0.9.8</version>                    # меняем версию +1 >---|---+
    mvn clean install tomcat7:redeploy -P prod  # prod - имя профиля >-+
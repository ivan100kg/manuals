Docker

Docker - средство упаковки, доставки и запуска приложений

Docker Container 
    это работающее приложение созданное на базе Image,
    можно создавать множество контейнеров на одной и той же базе.
    Контейнер работает до остановки приложения.
    Запускаумый инстанс образа. Можно запускать/останавл/удалять/перемещать
    Можно запускать на локальной машине, виртуальной, облаке
    Может быть запущен на любой ОС
    Изолирован от других контейнеров, имеет свою структуру

Docker Image
    Обеспечивает конфигурацию контейнера, ОС, зависимости, всякие данные
    это упакованная сборка приложения, готовая к запуску 
    это такая многослойная система из раздичных слоев(Ubuntu+Python+..)
    Для каждого Image при вызове 'docker images' выводятся след данные:
        repository  # название (-t имя)
        tag         # тэг  
        image ID    # id sha256
        created     # создан
        size        # размер

Dockerfile - скрипт для создания Image
    example:
    FROM openjdk:11-jdk                 # базовый образ для сборки image:version
    ENV CATALINA_HOME /usr/local/tomcat # переменные окружения
    ENV PATH $CATALINA_HOME/bin:$PATH
    WORKDIR /usr/local/                 # установить рабочий каталог
    RUN wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.75/bin/apache-tomcat-9.0.75.tar.gz && \
        tar -xf apache-tomcat-9.0.75.tar.gz && \
        mv apache-tomcat-9.0.75 ${CATALINA_HOME}
    COPY target/medserver.war  ${CATALINA_HOME}/webapps/    # копирование
    EXPOSE 8080                         # открыть порт
    CMD ["catalina.sh", "run"]          # выполнить команду при запуске контейнера
    
    # переменные окружения
        ENW TZ Europe/Samara        # либо указываем в dockerfile
        -e TZ Europe/Samara         # либо при запуске контейнера в параметрах

Порядок развертывания приложения в контейнере:
    1. Создаем Dockerfile в корне проекта, заполняем его(мануал отдельно)
    2. Билдим образ на основе Dockerfile -> docker build -t imName path
    3. Запускаем контейнер на базе образа -> docker run --rm -dp 3000:3000 imName
    4. Если нужно перезалить - смотрим запущенные контейнеры, копируем contId
    5. Останавливаем контейнер docker stop contId
    6. Удаляем конт, если при запуске не было опции --rm -> docker rm contId
    7. Возвращаемся к пункту 2

Docker Hub - хранилище сборок.

--- Console command ---------------------------------------------------------
# info
docker                          # все команды
docker COMMAND --help           # детальное описание команды
docker info                     # инфо о докер, память, образы, контейнеры
docker images                   # посмотреть образы на диске
docker ps                       # посмотреть запущенные контейнеры (-a все конты)

# dockerhub
docker login                    # зайти в уч запись
docker logout                   # выйти

# загрузка образа
docker pull im_name[:tag]       # загрузка образа из реестра образов (докерхаб
                                  по умолчанию) на лок машину /var/lib/docker,
                                  по умолчанию берется образ с тэгом :latest


# сборка образа
docker build -t name:tag path   # собрать Image по Dockerfile
                                  name - имя Image
                                  tag  - тэг, необязательный
                                  path - путь до Dockerfile
# создать контейнер                             
docker run im_name/id           # создать контейнер по образу + запустить
                                  если образа нет - то он скачается с докерхаб
                                  -d - запуск контейнера в фоновом режиме
                                  -p 80:80 - маппинг портов hostPort:containerPort
                                  --rm после отработки/остановки - конт удалится
                                  im/id - имя Image или id
                                  --ip 

# остановить/запустить контейнер
docker stop c_name/id           # остановить контейнер
docker start c_name/id          # запустить
docker restart c_name/id        # остановить + запустить
docker pause c_name/id          # пауза
docker unpause c_name/id        # снять с паузы

# удаление контейнеров
docker rm id/c_name             # удалить контейнер по ID/name
                                  удалить несколько - через пробел
docker rm $(docker ps -aq)      # удалить все контейнеры

# удалить образ
docker image rm id              # удалить образ -f - принудительно
docker rmi name:tag             # удалить ссылающийся образ на др образ

# установить тэг
docker tag im/id name:tag       # создать новую ссылку на существующий образ с
                                  любым названием и тэгом, в качестве источника
                                  может быть id, name, name:tag

# скопировать образ на другую машину
docker save -o имя_образа.tar имя_образа:тег    # сохраняем в файл
scp myapp.tar user@IP:/path                     # копируем на дпугую машину
docker load -i /path/myapp.tar                  # извлекаем образ на другой машине
                                                  можно запускать контейнер

# example
docker run --rm --name web -p 8080:8080 myProject
----------------------------------------------------------------------------


# прикрепить к Docker директорию на хостовой машине
-v absHostPath:absLocalPath # абсолютный хост путь : абс путь в контейнере

# docker volume - прикрепить хостовые директории(для хранения постоянных файлов)
docker volume create    # Create a volume
docker volume inspect   # Display detailed information on one or more volumes
docker volume ls        # List volumes
docker volume prune     # Remove all unused local volumes
docker volume rm        # Remove one or more volumes
docker run -v volumeName:absHostPath    # запуск volume:хост путь


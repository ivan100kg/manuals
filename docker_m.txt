Docker

Docker - средство упаковки, доставки и запуска приложений

Docker Container 
    это работающее приложение созданное на базе Image,
    можно создавать множество контейнеров на одной и той же базе.
    Контейнер работыет до остановки приложения.
    Запускаумый инстанс образа. Можно запускать/останавл/удалять/перемещать конт
    Можно запускать на локальной машине, виртуальной, облаке
    Может быть запущен на любой ОС
    Изолирован от других контейнеров, имеет свою структуру

Docker Image
    Обеспечивает конфигурацию контейнера, ОС, зависимости, всякие данные
    это упакованная сборка приложения, готовая к запуску 
    это такая многослойная система из раздичных слоев(Ubuntu+Python+..)

Dockerfile
    скрипт для создания Image

Порядок развертывания приложения в контейнере:
    1. Создаем Dockerfile в корне проекта, заполняем его(мануал отдельно)
    2. Билдим образ на основе Dockerfile -> docker build -t imName path
    3. Запускаем контейнер на базе образа -> docker run --rm -dp 3000:3000 imName
    4. Если нужно перезалить - смотрим запущенные контейнеры, копируем contId
    5. Останавливаем контейнер docker stop contId
    6. Удаляем конт, если при запуске не было опции --rm -> docker rm contId
    7. Возвращаемся к пункту 2

Docker Hub - хранилище сборок.

# Dockerfile - файл с настройками для создания Image:
FROM openjdk:17             # базовый образ для сборки image:version
WORKDIR /app                # установить рабочий каталог
COPY . /app                 # копировать все из тек дир в app/
EXPOSE 8080                 # проброс порта 8080
ENW TZ Europe/Samara        # переменная окружения TZ зо знач Europe/Samara
CMD ["./mvnw", "spring-boot:run"]   # что нужно делать докеру при запуске

# info
docker images               # посмотреть образы на диске
docker ps                   # посмотреть запущенные контейнеры (-a все конты)

# сборка образа
docker build -t name path   # собрать Image по Dockerfile
                              name - имя Image 
                              path - путь Dockerfile
# запуск контейнера                             
docker run image            # запуск контейнера по образу
docker run --rm id          # после отработки/остановки - конт с id=id удалится
docker run -dp 80:3000 im   # -d - запуск контейнера в фоновом режиме
                              -p - маппинг портов hostPort:containerPort
                              im - имя Image
# остановка/удаление контейнеров
docker stop id/cname        # остановить контейнер по id/name
docker rm id/cname          # удалить контейнер по ID/name
docker rm $(docker ps -aq)  # удалить все контейнеры

# example
docker run --rm --name web -p 8080:8080 myProject

# переменные окружения
ENW TZ Europe/Samara        # либо указываем в dockerfile
-e TZ Europe/Samara         # либо при запуске контейнера в параметрах

# Для каждого Image при вызове 'docker images' выводятся след данные:
repository  # название (-t имя)
tag         # тэг  
image ID    # id sha256
created     # создан
size        # размер

# прикрепить к Docker директорию на хостовой машине
-v absHostPath:absLocalPath # абсолютный хост путь : абс путь в контейнере

# docker volume - прикрепить хостовые директории(для хранения постоянных файлов)
docker volume create    # Create a volume
docker volume inspect   # Display detailed information on one or more volumes
docker volume ls        # List volumes
docker volume prune     # Remove all unused local volumes
docker volume rm        # Remove one or more volumes
docker run -v volumeName:absHostPath    # запуск volume:хост путь
Контейнеры (Container):
    Контейнеры в криптографии используются для хранения и защиты конфиденциальных данных, 
    таких как пароли, секретные ключи и другие чувствительные материалы. Контейнер обычно
    шифруется при помощи пароля или ключа, чтобы обеспечить конфиденциальность и 
    предотвратить несанкционированный доступ к содержимому.

Сертификаты (Certificate): 
    Сертификаты используются для подтверждения подлинности и идентификации субъекта, 
    такого как веб-сайт, сервер или пользователь. Сертификат содержит информацию о субъекте, 
    публичный ключ и подпись выдающего сертификат органа (Certificate Authority, CA). 
    Сертификаты широко используются в аутентификации, шифровании и цифровых подписях.

Ключи (Key): Ключи в криптографии используются для шифрования, дешифрования, цифровой 
    подписи и проверки подписи данных. Ключи бывают двух типов: публичные и приватные. 
    Публичный ключ используется для шифрования данных или проверки подписи, в то время как 
    приватный ключ хранится в секрете и используется для дешифрования данных или создания 
    подписей. Ключи образуют пару, где приватный ключ соответствует публичному ключу, и 
    только владелец приватного ключа может дешифровать данные или создавать подписи.

Подписи (Signature): 
    Цифровая подпись представляет собой математическую схему, которая аутентифицирует и 
    обеспечивает целостность передаваемых данных. Подпись создается с использованием 
    приватного ключа владельца, а затем может быть проверена с использованием соответствующего 
    публичного ключа. Если данные были изменены после создания подписи, проверка не будет 
    успешной. Цифровые подписи широко используются для обеспечения подлинности и целостности 
    сообщений, электронных документов и других цифровых данных.

Ключевые пары электронной подписи:
    Ключевые пары электронной подписи используются для обеспечения целостности, аутентичности
    и невозможности отказа в подписанных электронных документах, сообщениях и транзакциях. 
    Закрытый ключ используется для создания подписи, а открытый ключ используется для 
    верификации подписи.

Ключевые пары ключевого обмена:
    Ключевые пары ключевого обмена используются для обеспечения конфиденциальности и 
    безопасности обмена информацией между двумя или более сторонами. Закрытый ключ используется
    для согласования общего секретного ключа, который будет использоваться для шифрования и 
    дешифрования сообщений между сторонами. Примеры алгоритмов ключевого обмена включают 
    Diffie-Hellman и Elliptic Curve Diffie-Hellman.

Ключи парной связи созданные с помощью алгоритма ключевого обмена:
    Ключи парной связи, созданные с помощью алгоритма ключевого обмена, используются для 
    шифрования и расшифрования данных между двумя сторонами с использованием одного общего 
    ключа. Этот ключ используется для обеспечения конфиденциальности и защиты данных от 
    несанкционированного доступа.


// ---------------------------------------------------------------------------------------------------------
// --- Создание объекта генерации ключевых пар на примере ГОСТ 34.11-2012, 256 бит -----
// Создание объекта генерации ключевых пар электронной подписи
KeyPairGenerator kg256 = KeyPairGenerator.getInstance(JCP.GOST_EL_2012_256_NAME, JCSP.PROVIDER_NAME);
// Создание объекта генерации ключевых пар ключевого обмена
KeyPairGenerator kgChange = KeyPairGenerator.getInstance(JCP.GOST_DH_2012_256_NAME, JCSP.PROVIDER_NAME);


// ---------------------------------------------------------------------------------------------------------
// --- Определение параметров генерации ключевой пары электронной подписи и ключевого обмена ---------------
// JSCP
// стандарт, создание временного контейнера с неким произвольным паролем и именем (алиасом), для выработки 
   ключа потребуется набрать достаточную энтропию в стандартном окне БиоДСЧ криптопровайдера КриптоПро CSP
KeyPair keyPairStd = kg256.generateKeyPair();       // генерация ключевой пары/контейнера

// с заданием алиаса контейнера(доп способ)
// Создание контейнера типа HDIMAGE с именем
String container = KeyStoreConfig.getInstance().getHDImage().makeContainerName("hui");
AlgIdSpec paramsSig = new NameAlgIdSpec(AlgIdSpec.OID_PARAMS_SIG_2012_256, container); // для подписей
AlgIdSpec paramsExc = new NameAlgIdSpec(AlgIdSpec.OID_PARAMS_EXC_2012_256, container); // для ключев обмена
kg256.initialize(paramsSig);                      // применить параметры
kg256.initialize(new CryptDhAllowedSpec());       // возможность производить на закрытом ключе согласование 
                                                     ессионных ключей шифрования, втоматически устанавливается 
                                                     при генерации ключей ключевого обмена (DH) на всех 
                                                     алгоритмах , при генерации ключей подписи на алгоритме 
                                                     ГОСТ Р 34.10-2012 не добавляется, но можно добавить 
                                                     этой командой
KeyPair keyPairAlias = kg256.generateKeyPair();   // генерация ключевой пары/контейнера

// ключи
PrivateKey privateKey = keyPairAlias.getPrivate();
PublicKey publicKey = keyPairAlias.getPublic();


// ---------------------------------------------------------------------------------------------------------
// --- Хэширование данных в соответствии с алгоритмами ГОСТ Р 34.11-2012 -----------------------------------
// Создание объекта хэширования данных
MessageDigest digest = MessageDigest.getInstance(JCP.GOST_DIGEST_2012_256_NAME, JCSP.PROVIDER_NAME);

// Определение параметров хэширования данных(доп способ)
OID digestOid = new OID("1.2.643.2.2.30.1"); // допустимо исп только параметры по ум: "1.2.643.2.2.30.1"
/* преобразование к типу GostDigest */
GostDigest gostDigest = (GostDigest)digest;
/* установка требуемых параметров */
gostDigest.reset(digestOid);

// Обработка хэшируемых данных
// 2 способа:   при помощи метода update()  класса MessageDigest
//              при помощи метода read()    класса DigestInputStream
byte[] data = new byte[]{1,2,3,4};  // some data
// 1
digest.update(data);    // самый простой способ, есть способы побайтовой/блочной обработки
// 2
ByteArrayInputStream stream = new ByteArrayInputStream(data);
DigestInputStream digestStream = new DigestInputStream(stream, digest);
byte[] cashData = new byte[digestStream.available()];
digestStream.read(cashData, 0, digestStream.available());

// Завершение операции хэширования
digest.digest();


// ---------------------------------------------------------------------------------------------------------
// --- Формирование электронной подписи в соответствии c алгоритмами ГОСТ Р 34.10-2012 ---------------------
// Создание объекта формирования электронной подписи
Signature sig1 = Signature.getInstance(JCP.GOST_SIGN_2012_256_NAME, JCSP.PROVIDER_NAME);            //
Signature sig2 = Signature.getInstance(JCP.CRYPTOPRO_SIGN_2012_256_NAME, JCSP.PROVIDER_NAME);       // для совместимости с КриптоПро CSP
Signature sigN1 = Signature.getInstance(JCP.RAW_GOST_SIGN_2012_256_NAME, JCSP.PROVIDER_NAME);       // без хэширования данных
Signature sigN2 = Signature.getInstance(JCP.RAW_CRYPTOPRO_SIGN_2012_256_NAME, JCSP.PROVIDER_NAME);  // без хэширования данных для совместимости с КриптоПро CSP

// Инициализация объекта формирования электронной подписи
PrivateKey privateKey = (PrivateKey) KeyStore.getInstance("HDIMAGE").getKey("hui", new char[]{'q','w', 'e', 'd', 's', 'a'});  // ключ с алгоритмом "GOST3410_2012_256"
sig1.initSign(keyPairAlias.getPrivate());

// Определение параметров формирования электронной подписи
ParamsInterface digestParams; // интерфейс параметров хэширования
sig1.setParameter(digestParams); // установка параметров, определенных интерфейсом digestParams

// Формирование электронной подписи и вычисление значения
sig1.update(data);              // Обработка подписываемых данных, есть способы побайтовой/блочной обработки
byte [] dataSign = sig1.sign(); // байтовый массив, содержащий значение подписи, можно добавлять в сущ массив sign(byte[] buf, int offset, int len)


// ---------------------------------------------------------------------------------------------------------
// --- Проверка электронной подписи в соответствии с алгоритмом ГОСТ Р 34.10-2012 --------------------------
// Создание объекта проверки электронной подписи (тоже самое что при формировании эп)
Signature sigCheck = Signature.getInstance(JCP.GOST_SIGN_2012_256_NAME, JCSP.PROVIDER_NAME);

// Инициализация объекта проверки электронной подписи
sigCheck.initVerify(publicKey);

// Определение параметров проверки электронной подписи(так же как при формировании)
//            ParamsInterface digestParams; // интерфейс параметров хэширования
//            sig1.setParameter(digestParams); // установка параметров, определенных интерфейсом digestParams

// Проверка электронной подписи
sigCheck.update(dataSign);  // Обработка подписываемых данных, есть способы побайтовой/блочной обработки
sigCheck.verify(dataSign);  // Проверка электронной подписи, true/false, можно указать смещение verify(byte[] signature, int offset, int length)


// ---------------------------------------------------------------------------------------------------------
// --- Создание ключевого обмена ключей парной связи с помощью алгоритма ключевого обмена ------------------
// Создание объекта генерации ключей парной связи
KeyAgreement ka = KeyAgreement.getInstance(JCP.GOST_DH_2012_256_NAME, JCSP.PROVIDER_NAME);


// ---------------------------------------------------------------------------------------------------------
// --- Работа с ключевыми носителями -----------------------------------------------------------------------
/*
    для каждого ключа, хранящегося на ключевом носителе, допустимо хранение одного соответствующего ключу сертификата на этом носителе
    если на ключевом носителе уже имеется сертификат, соответствующий ключу, то при записи нового сертификата существующий сертификат уничтожается
    если записываемый сертификат не соответствует ни одному из ключей, хранящихся на носителе, то сертификат записывается в хранилище доверенных сертификатов
*/
// Ключевой носитель(хранилище) включает в себя ключи ЭП, ключи обмена и сертификаты
// Запись ключей электронной подписи и ключевого обмена
// Определение типа используемого ключевого носителя
KeyStore keyStore = KeyStore.getInstance("HDIMAGE", JCSP.PROVIDER_NAME);    // жесткий диск, "REGISTRY" - реестр Windows, есть и другие типы носителей

// Загрузка содержимого ключевого носителя
keyStore.load(null, null);  // null, null     - не существует хранилища сертификатов
                                            // null, passwd   - хранилище существует, операции только с носителем
                                            // stream, passwd - хранилище существует, операции с ним (оно в stream) и с носителем
// Запись ключа на носитель
String alias = "hui";   // идентификатор (уникальное имя) ключа и соответствующего ему сертификата открытого ключа
PrivateKey key;         // ключ электронной подписи или ключевого обмена от пароля на хранилище, используемого при загрузке)
Certificate[] chain;    // цепочка сертификатов, начиная с корневого и и заканчивая сертификатом открытого ключа, соответствующего открытому ключу
//keyStore.setKeyEntry(alias, privateKey, null, new Certificate[]{});


// --- Чтение ключей электронной подписи и ключевого обмена ------------------------------------------------
alias = "9fe304f4-0b4e-436f-8b6d-672f2a04d04c";   // имя ключа
Key key = keyStore.getKey(alias, null);
# git

--- Settings --------------------------------------------------------------
git config --list								# all settings
git config --list --show-origin					# the same + location of
                                                  config files
git config user.name							# show a value of a key
git config --global user.name "my Name"       	# name
git config --global user.email myemail@ex.hu  	# email
git config --global core.editor vim				# default editor
git config --global init.defaultBranch main		# name of main default new 
												  branch(master is default)
git config --global pull.rebase "true/false"	# true - перебазирование 
												  при получении изменений.
                                                  false - смещение вперёд если 
												  возможно — иначе создание 
												  коммита слияния.
--- Help -----------
git help <команда>
git <команда> --help
man git-<команда>

--- What is Git -------------------------------------------------------------
# main states of files
tarcked			- отслеж файлы(добавленные в индекс)(те о котор знает git)
    unmodified  - не измененные(после коммита или клонирования)
    modifed     - (измененные)поменялись, но ещё не были закоммичены
    staged      - (индексированный) это изменённый файл в его текущей версии,
                  отмеченный для включения в следующий коммит.
    commited    - (зафиксированный) файл уже сохранён в вашей локальной базе
untracked		- это всё остальное, любые файлы в вашем рабочем каталоге, 
				  которые не входили в ваш последний снимок состояния 
				  и не подготовлены к коммиту.
	Untracked  Unmodified  Modified  Staged
		|           |          |        |
		+------------------------------>| - add the file
		|           +--------->|        | - edit the file
		|           |          +------->| - stage the file
		|<----------+                   | - remove the file
		            |<------------------+ - commit

# main sections of a Git project
Working directory           - снимок одной версии проекта
Index                       - что попадёт в следующий коммит
.git derectory(Repository)  - метаданные и база объектов вашего проекта
	Working dir  Index  .git
		|          |      |
		|<----------------+ - checkout the project
		+--------->|      | - stage fixes
				   +----->|	- commit
    
--- Getting a Git Repository -------------------------------------------------
git init        # создание репозитория в сущ каталоге. Создается дир-я .git
                  содерж все необх файлы репозитория — структуру Git реп-ия.
git clone <url> # с сервера забирается (pulled) каждая версия каждого файла из
                  истории проекта. Извлекается рабочая копия последней версии. 

--- Basics ------------------------------------------------------------
# status
git status                      # посмотреть состояние файлов, ветку,...
git status -s                   # short version.

# diff
git diff						# что изменено но не в индексе.
git diff --staged				# что в индексе и готовится к коммиту.

# add
git add <file> or -A        	# add file to index(подготовка к коммиту)
git reset HEAD <file>          	# отменить add, файл будет не в индексе
git restore --staged			# тоже - отмена индексации файла
 
# commit
git commit -m "Initial commit." # коммит, фиксация изменений, -m - коммент
git commit -a					# add + commit of trackied files
git commit --amend				# переделать/заменить последний коммит
								  можно добавить/удалить то что забыли, 
								  выполнить add, переписать сообщение.
# Отмена/откат
git checkout -- <file>			# для неиндексированного файла отменить все 
git restore <file>				  изменения, вернуть состояние файла до 
								  состояния последнего коммита.
git reset HEAD <file>           # отмена индексации файла
git restore --staged <file>     

# delete
git rm <file>					# удаляет из раб каталога и из индекса
git rm --cached                 # удалить из индекса
git restore --staged			# удалить из индекса
rm <file> + git add <file>      # то же самое

# move/rename
git mv file_from file_to        # переименовать
mv f1 f2 + rm f1 + add f2       # то же самое

--- Commit History -------------------------------------------------------------
git log                         # перечисляет коммиты, сделанные в репозитории
                                  в обратном к хрон порядку.
git log -p -2                   # показывает разницу(патч/patch) между комм
                                  2 - лимит записей
git log --stat                  # сокращенная статистика
git log --pretty=oneline        # еще аргументы short, full, fuller, format 
                                  меняет формат вывода для удобства.
git log --pretty=format:""      # свой формат вывода, напр "%h - %an, %ar : %s"
git log --pretty=oneline --graph  графы веток, коммитов (также с опцией oneline)
    Опции в форматированном выводе:
    Опция   | Описания вывода
    --------+----------------
    %H      | Хеш коммита
    %h      | Сокращенный хеш коммита
    %T      | Хеш дерева
    %t      | Сокращенный хеш дерева
    %P      | Хеш родителей
    %p      | Сокращенный хеш родителей
    %an     | Имя автора
    %ae     | Электронная почта автора
    %ad     | Дата автора (формат даты можно задать опцией --date=option)
    %ar     | Относительная дата автора
    %cn     | Имя коммитера
    %ce     | Электронная почта коммитера
    %cd     | Дата коммитера
    %cr     | Относительная дата коммитера
    %s      | Содержание

    Наиболее распространенные опции для команды git log:
    Опция	        | Описание
    ----------------+-------------------------------------
    -p              | Показывает патч для каждого коммита.
    --stat          | Показывает статистику измененных файлов для каждого коммита.
    --shortstat     | Отображает только строку с количм изменений/вставок/удалений
                    | для команды --stat.
    --name-only     | Показ список измененных файлов после информации о коммите.
    --name-status   | Показ список файлов, которые добавлены/изменены/удалены.
    --abbrev-commit | Показ только неск символов SHA-1 чек-суммы вместо всех 40.
    --relative-date | Отображает дату в относительном формате (например, 
                    | «2 weeks ago») вместо стандартного формата даты.
    --graph         | Отображает ASCII граф с ветвлениями и историей слияний.
    --pretty        | Показывает коммиты в альтернативном формате. Возможные
                    | варианты опций: oneline, short, full, fuller и format
    --oneline       | Сокращение для одновременного использования 
                    | опций --pretty=oneline --abbrev-commit.

--- Ограничение вывода ---------------------------------------------------------
git log -2                  # два последних коммита
git log --since=2.weeks     # список коммитов, сделанных за последние две недели
git log --until=2.days      # список коммитов, сделанных до 2-х дней назад
--since=2008-01-15			# точная дата
2 years 1 day 3 minutes ago # относительная дата
--author 					# дает возможность фильтровать по автору коммита
--grep 						# искать по ключевым словам в сообщении коммита.
git log -S some_string		# коммиты, в которых изменение в коде повлекло за
							  собой добавление или удаление этой строки.
git log -- path/to/file		# коммиты, в которых были изменения этих файлов

	Опции для ограничения вывода команды git log:
	Опция	    | Описание
    ------------+----------------------------------------
	-n			| Показывает только последние n коммитов.
	--since,	| Показывает только те коммиты, которые были сделаны 
	--after 	| после указанной даты.
	--until,	| Показывает только те коммиты, которые были сделаны 
	--before	| до указанной даты.
	--author	| Показывает только те коммиты, в которых запись author 
			    | совпадает с указанной строкой.
	--committer	| Показывает только те коммиты, в которых запись committer 
	            | совпадает с указанной строкой.
	--grep		| Показывает только коммиты, сообщение которых содержит 
			    | указанную строку.
	-S			| Показывает только коммиты, в которых изменение в коде 
				| повлекло за собой добавление или удаление указанной строки.
	--no-merges	| Исключить коммиты слияния.

Exammple:
git log --pretty="%h - %s" --author='Hamano' --since="2008-10-01" 
	--before="2008-11-01" --no-merges -- t/

--- Remotes ----------------------------------------------------------
# Удалённые репозитории представляют собой версии вашего проекта
  может быть несколько удалённых репозиториев, каждый из которых может
  быть доступен для чтения или для чтения-записи.
git remote              	# названия доступных удалённых репозиториев.
                              origin - имя сервера по умолчанию с которого
                              производится клонирование.
git remote -value       	# адреса для чтения и записи, привяз к реп.
git remote add <repn> <url>	# доб реп и дать ему свое короткое имя 'repn',
							  так можно связать новый лок реп с GitHub.
git fetch [remote]			# связаться с реп, получить изменения кот еще нет,
							  после появятся ссылки все ветки, кот можно
							  смотреть или слить. Не модифицирует то, над чем 
							  вы работаете в данный момент, сливается вручную.
git clone <url>				# автоматически добавляет реп с названием 'origin'
							  и настраивает локальную ветку master на 
							  отслеживание удалённой ветки master на сервере.
git pull 					# извлекает (fetch) данные с сервера, с которого вы
                              изначально клонировали, с ветки по умолчанию
							  и автоматически пытается слить (merge) их с кодом
							  в вашей working directory
git push <remote> <branch>  # отправка коммитов локальной ветки 'branch' на 
							  удалённый репозиторий 'remote' (в ту же ветку).
git remote show <remote>	# больше информации об одном из удалённых реп.
							  показывает куда и откуда будет что вливаться, 
							  какие ветки есть и как все настроено.
git remote rename <o> <n>	# переименовать реп 'o' to 'n'.
git remote remove <remote>	# удалить репозиторий.


# Ветки ***
git branch new_branch    # новая ветка точная копия master
git branch               # показывает ветки и на какой находимся мы
git checkout new_branch  # переключение на ветку по имени
git merge new_branch     # слияние веток
git branch -d new_branch # удаление ветки new_branch

# Коммиты
git log                     # Список всех коммитов и их идентификаторов
git log hg6d4j              # пишем первую часть идентификатора - подробная инфа
git diff hdf56d..6uii8j     # разница между коммитами
git difftool hdf56d..6uii8j # разница между коммитами графич редактор
git checkout hdf56d         # возвращение файла к выбранному коммиту
git revert hdf56d           # исправление коммита


--- Ignoring Files --------------------------------------------------
# создаем файл .gitignore добавляем в него все что хотим игнорировать
wild cards:
    шаблоны применяются рекурсивно для всего дерева каталогов
    #       - пустые или строки начинающ с '#' игнорируются
    *       - 0 or more symbols
    ?       - 1 symbol
    [qw]    - q or w, matches any character inside the brackets
    [0-9]   - matches any character between range
	каталоги/вложенность:
    /temp   - файлы попадающ под шаблон 'temp' только в корневом каталоге
    temp/   - исключить директорию попадающ под шаблон 'temp'
    !temp   - инвертировать шаблон
    a/**/z  - вложенный каталог (a/z, a/b/z, a/b/c/z, и так далее)

# git

--- Settings --------------------------------------------------------------
git config --list								# all settings
git config --list --show-origin					# the same + location of
												  config files
git config user.name							# show a value of a key
git config --global user.name "my Name"       	# name
git config --global user.email myemail@ex.hu  	# email
git config --global core.editor vim				# default editor
git config --global init.defaultBranch main		# name of main default new 
												  branch(master is default)

--- Help -----------
git help <команда>
git <команда> --help
man git-<команда>

--- What is Git -------------------------------------------------------------
# main states of files
tarcked			- отслеж файлы(добавленные в индекс)(те о котор знает git)
    unmodified  - не измененные(после коммита или клонирования)
    modifed     - (измененные)поменялись, но ещё не были закоммичены
    staged      - (индексированный) это изменённый файл в его текущей версии,
                  отмеченный для включения в следующий коммит.
    commited    - (зафиксированный) файл уже сохранён в вашей локальной базе
untracked		- это всё остальное, любые файлы в вашем рабочем каталоге, 
				  которые не входили в ваш последний снимок состояния 
				  и не подготовлены к коммиту.
	Untracked  Unmodified  Modified  Staged
		|           |          |        |
		+------------------------------>| - add the file
		|           +--------->|        | - edit the file
		|           |          +------->| - stage the file
		|<----------+                   | - remove the file
		            |<------------------+ - commit

# main sections of a Git project
Working directory           - снимок одной версии проекта
Index                       - что попадёт в следующий коммит
.git derectory(Repository)  - метаданные и база объектов вашего проекта
	Working dir  Index  .git
		|          |      |
		|<----------------+ - checkout the project
		+--------->|      | - stage fixes
				   +----->|	- commit
    
--- Getting a Git Repository -------------------------------------------------
git init        # создание репозитория в сущ каталоге. Создается дир-я .git
                  содерж все необх файлы репозитория — структуру Git реп-ия.
git clone <url> # с сервера забирается (pulled) каждая версия каждого файла из
                  истории проекта. Извлекается рабочая копия последней версии. 

--- Git Basics ------------------------------------------------------------
--- file info ---
git status                      # посмотреть состояние файлов, ветку,...
git status -s                   # short version.
git diff						# что изменено но не в индексе.
git diff --staged				# что в индексе и готовится к коммиту.

--- add ---
git add <filename> or -A        # add file to index(подготовка к коммиту)
git reset <filename>            # отменить add(вернуть в сост посл коммита)

--- commit ---
git commit -m "Initial commit." # коммит, фиксация изменений, -m - коммент
git commit -a					# add + commit of trackied files

--- delete ---
git rm <file>					# удаляет из раб каталога и из индекса
git rm --cached                 # удалить из индекса
git restore --staged			# удалить из индекса
rm <file> + git add <file>      # то же самое

--- move/rename ---
git mv file_from file_to        # переименовать
mv f1 f2 + rm f1 + add f2       # то же самое

--- Commit History -------------------------------------------------------------
git log                         # перечисляет коммиты, сделанные в репозитории
                                  в обратном к хрон порядку.
git log -p -2                   # показывает разницу(патч/patch) между комм
                                  2 - лимит записей
git log --stat                  # сокращенная статистика
git log --pretty=oneline        # еще аргументы short, full, fuller, format 
                                  меняет формат вывода для удобства.
git log --pretty=format:""      # свой формат вывода, напр "%h - %an, %ar : %s"
git log --pretty=oneline --graph  графы веток, коммитов (также с опцией oneline)
    Опции в форматированном выводе: 
    Опция	Описания вывода
    %H      Хеш коммита
    %h      Сокращенный хеш коммита
    %T      Хеш дерева
    %t      Сокращенный хеш дерева
    %P      Хеш родителей
    %p      Сокращенный хеш родителей
    %an     Имя автора
    %ae     Электронная почта автора
    %ad     Дата автора (формат даты можно задать опцией --date=option)
    %ar     Относительная дата автора
    %cn     Имя коммитера
    %ce     Электронная почта коммитера
    %cd     Дата коммитера
    %cr     Относительная дата коммитера
    %s      Содержание

    Наиболее распространенные опции для команды git log
    Опция	        Описание
    -p              Показывает патч для каждого коммита.
    --stat          Показывает статистику измененных файлов для каждого коммита.
    --shortstat     Отображает только строку с количм изменений/вставок/удалений
                    для команды --stat.
    --name-only     Показ список измененных файлов после информации о коммите.
    --name-status   Показ список файлов, которые добавлены/изменены/удалены.
    --abbrev-commit Показ только неск символов SHA-1 чек-суммы вместо всех 40.
    --relative-date Отображает дату в относительном формате (например, 
                    «2 weeks ago») вместо стандартного формата даты.
    --graph         Отображает ASCII граф с ветвлениями и историей слияний.
    --pretty        Показывает коммиты в альтернативном формате. Возможные
                    варианты опций: oneline, short, full, fuller и format
    --oneline       Сокращение для одновременного использования 
                    опций --pretty=oneline --abbrev-commit.
--- Ограничение вывода ---
git log -2                  # два последних коммита
git log --since=2.weeks     # список коммитов, сделанных за последние две недели
git log --until=2.days      # список коммитов, сделанных до 2-х дней назад

# связать реп с созданным на github назовем origin(мб много в проекте)
git remote add origin https://github.com/ivan100kg/remember.git

# пересылаем на сервер origin - имя master - ветка по умолчанию
git push origin master

# клонировать себе уже готовый реп с github и получить копию локально
git clone https://github.com/ivan100kg/remember.git

# скачать изменения/обновления репозитория
git pull origin master

# Ветки ***
git branch new_branch    # новая ветка точная копия master
git branch               # показывает ветки и на какой находимся мы
git checkout new_branch  # переключение на ветку по имени
git merge new_branch     # слияние веток
git branch -d new_branch # удаление ветки new_branch

# Коммиты
git log                     # Список всех коммитов и их идентификаторов
git log hg6d4j              # пишем первую часть идентификатора - подробная инфа
git diff hdf56d..6uii8j     # разница между коммитами
git difftool hdf56d..6uii8j # разница между коммитами графич редактор
git checkout hdf56d         # возвращение файла к выбранному коммиту
git revert hdf56d           # исправление коммита


--- Ignoring Files --------------------------------------------------
# создаем файл .gitignore добавляем в него все что хотим игнорировать
wild cards:
    шаблоны применяются рекурсивно для всего дерева каталогов
    #       - пустые или строки начинающ с '#' игнорируются
    *       - 0 or more symbols
    ?       - 1 symbol
    [qw]    - q or w, matches any character inside the brackets
    [0-9]   - matches any character between range
	каталоги/вложенность:
    /temp   - файлы попадающ под шаблон 'temp' только в корневом каталоге
    temp/   - исключить директорию попадающ под шаблон 'temp'
    !temp   - инвертировать шаблон
    a/**/z  - вложенный каталог (a/z, a/b/z, a/b/c/z, и так далее)

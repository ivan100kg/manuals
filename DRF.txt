Django REST Framework

pip install djangorestframework # install

Models/Модели ----------------------------------------------------------------
# модели ничем не отличаются от Django
# app/models.py
from django.db import Model
class Book(models.Model):
    name = models.CharField(max_length=255)
    price = models.IntegerField()

Serializers/Сериализаторы ----------------------------------------------------
# сериализация моделей в JSON и десериализация из JSON в БД(при POST запросах)
# чем-то схожи с Forms, имеют похожие флаги и параметры
# поля с пом флагов могут быть настроены для отображ в html каким-либо образом
# создать файл в приложении serialiser.py
# app/serializer.py
from rest_framework import serializers  # классы сериализаторов/
Serializer                      # базовый класс, настраивается подробно
ModelSerializer                 # наследник, облегченное создание, id авто 
HyperlinkedModelSerializer      # наследник, вместо id - url
from store.models import Book
class BooksSerializer(Serializer):
    # сериализуемые/десериализуемые поля
    id = serializers.IntegerField(read_only=True)   # добавим поле id
    name = serializers.CharField(max_length=255)
    price = serializers.IntegerField()
    
    # методы для создания и изменения при вызове serializer.save()
    def create(self, validated_data):   # возвращ новую запись из валид данных
        return Book.objects.create(**validated_data)
                
    def update(self, instance, validated_data): # обновляет и возвр сущ запись
        instance.name = validated_data.get('name', instance.name)
        instance.price = validated_data.get('price', instance.price)
        instance.save()
        return instance
    
class BooksSerializer(ModelSerializer): # типа ModelForm, аналог того что вверху
    class Meta:                           create, update уже переопределены
        model = Book
        fields = ['id', 'name', 'name_ru']

Views/представления -----------------------------------------------------------
from store.models import Book                           # модель
from store.serializers import BooksSerializer           # сериалайзер
from django.http import HttpResponse, JsonResponse      # ответ(html, json)
from django.views.decorators.csrf import csrf_exempt    # исп токен в POST
from rest_framework.parsers import JSONParser           # json парсер

from rest_framework.viewsets import ModelViewSet        # 
from rest_framework.generics import ListCreateAPIView   # можно добавлять в спис
from rest_framework.generics import ListAPIView         # только чтение списка
from rest_framework.generics import RetrieveAPIView     # чтение экземпляра
from ... generics import RetrieveUpdateDestroyAPIView   # все действия с экз-ом
class BookViewSet(ModelViewSet):
    queryset = Book.objects.all()                       # список
    serializer_class = BooksSerializer                  # сериализатор
    permission_classes = [permissions.IsAuthenticated]  # разрешение/доступ

# urls.py
from rest_framework.routers import SimpleRouter
from store.views import BookViewSet
router = SimpleRouter()
router.register(r'book', BookViewSet)
urlpatterns = [
    path('admin/', admin.site.urls),
]
urlpatterns += router.urls


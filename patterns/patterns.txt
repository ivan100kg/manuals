Паттерны проектирования

Отношения между сущностями:
Наследование    - IS-A позволяет классу-наследнику унаследовать функц parent класса
                  parentClass ◁—— child (незакрашенная стрелка, сплошная линия)
Реализация      - определение интерфейса и его реализация в классах
                  Interface ◁-- child (незакрашенная стрелка, пунктир линия)
Ассоциация:     - объект класса A содержит или использует объект класса B
                  classA *——>1 classB (обыч стрелка, 1- один *-ко многим)
    Композиция  - HAS-A класс A содержит объект класса B
                  classA ♦——> classB (закраш ромб)
    Агрегация   - HAS-A класс A использует ссылку на сущ-й объект класса B
                  classA ◊——> classB (незакраш ромб)

ac - abstract class
cc - concrete class
i  - interface

Абстрактный класс или интерфейс:
Абстрактные классы - если надо определить общий функционал для родственных объектов
Интерфейсы - если нам надо определить функционал для группы разрозненных объектов,
которые могут быть никак не связаны между собой

Паттерн - описание взаимодействия объектов и классов, адаптированных для решения
общей задачи проектирования в конкретном контексте 

Состав паттерна:
имя         - имя паттерна(Стратегия)
задача      - описание того, когда следует применяеть паттерн
решение     - абстрактное описание решения задачи с помощью классов и объектов
результаты  - следствия применения паттерна

Назначения паттернов:
порождающие - процесс создания объектов
структурные - композизия объектов и классов
поведения   - взаимодействие между классами/объектами

Классификаци паттернов по типу:
1. Паттерны классов - описывают отношения между классами посредством наследования. 
Отношения между классами определяются на стадии компиляции.
2. Паттерны объектов - описывают отношения между объектами. 
Эти отношения возникают на этапе выполнения, поэтому обладают большей гибкостью


      \ цель| порождающие      | структурные     | поведения  
уровень\    |                  |                 |
------------+------------------+-----------------+------------------------
class       | Factory Method   | Adapter(class)  | Template method
            |                  |                 | Interpreter
------------+------------------+-----------------+------------------------
object      | Abstract Factory | Adapter(object) | Command
            | Builder          | Bridge          | Chain of responsibility
            | Prototype        | Composite       | Iterator
            | Singleton        | Decorator       | Mediator
            |                  | Facade          | Memento
            |                  | Flyweight       | Observer
            |                  | Proxy           | State
            |                  |                 | Strategy
            |                  |                 | Visitor
------------+------------------+-----------------+------------------------

=== Порождающие паттерны =================================================

--- Фабричный метод (Factory Method) ---
Базовый класс делегирует создание объектов классам-наследникам

UML:
ac_Product ◁—— cc_ProductA <—— cc_CreatorA ——▷ ac_Creator
           ◁—— cc_ProductB <—— cc_CreatorB ——▷

Применение:
Когда заранее неизвестно, объекты каких типов необходимо создавать
Когда система должна быть независимой от процесса создания новых объектов и расширяемой:
в нее можно легко вводить новые классы, объекты которых система должна создавать.
Когда создание новых объектов необходимо делегировать из базового класса классам наследникам

Участники:
Product - абс класс определяет интерфейс класса, объекты которого надо создавать
ProductA и ProductB - конкретные классы представляют реализацию класса Product
Creator - абс класс опред абс фабричный метод FactoryMethod(), который возвр объект Product
CreatorA и CreatorB - конкретные классы  наследники класса Creator, определяющие свою 
реализацию метода FactoryMethod(). Причем метод FactoryMethod() каждого отдельного 
класса-создателя возвращает определенный конкретный тип продукта. Для каждого конкретного 
класса продукта определяется свой конкретный класс создателя.


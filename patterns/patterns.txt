Паттерны проектирования

Отношения между сущностями:
Наследование    - IS-A позволяет классу-наследнику унаследовать функц parent класса
                  parentClass ◁—— child (незакрашенная стрелка, сплошная линия)
Реализация      - определение интерфейса и его реализация в классах
                  Interface ◁-- child (незакрашенная стрелка, пунктир линия)
Ассоциация:     - объект класса A содержит или использует объект класса B
                  classA *——>1 classB (обыч стрелка, 1- один *-ко многим)
    Композиция  - HAS-A класс A содержит объект класса B
                  classA ♦——> classB (закраш ромб)
    Агрегация   - HAS-A класс A использует ссылку на сущ-й объект класса B
                  classA ◊——> classB (незакраш ромб)

ac - abstract class
cc - concrete class
i  - interface

Абстрактный класс или интерфейс:
Абстрактные классы - если надо определить общий функционал для родственных объектов
Интерфейсы - если нам надо определить функционал для группы разрозненных объектов,
которые могут быть никак не связаны между собой

Паттерн - описание взаимодействия объектов и классов, адаптированных для решения
общей задачи проектирования в конкретном контексте 

Состав паттерна:
имя         - имя паттерна(Стратегия)
задача      - описание того, когда следует применяеть паттерн
решение     - абстрактное описание решения задачи с помощью классов и объектов
результаты  - следствия применения паттерна

Назначения паттернов:
порождающие - процесс создания объектов
структурные - композизия объектов и классов
поведения   - взаимодействие между классами/объектами

Классификаци паттернов по типу:
1. Паттерны классов - описывают отношения между классами посредством наследования. 
Отношения между классами определяются на стадии компиляции.
2. Паттерны объектов - описывают отношения между объектами. 
Эти отношения возникают на этапе выполнения, поэтому обладают большей гибкостью


      \ цель| порождающие      | структурные     | поведения  
уровень\    |                  |                 |
------------+------------------+-----------------+------------------------
class       | Factory Method   | Adapter(class)  | Template method
            |                  |                 | Interpreter
------------+------------------+-----------------+------------------------
object      | Abstract Factory | Adapter(object) | Command
            | Builder          | Bridge          | Chain of responsibility
            | Prototype        | Composite       | Iterator
            | Singleton        | Decorator       | Mediator
            |                  | Facade          | Memento
            |                  | Flyweight       | Observer
            |                  | Proxy           | State
            |                  |                 | Strategy
            |                  |                 | Visitor
------------+------------------+-----------------+------------------------

=== Порождающие паттерны =================================================

Фабричный метод (Factory Method)
      Фабричный метод определяет интерфейс для создания объектов в суперклассе,
      но позволяет подклассам выбирать классы, которые нужно создавать. Таким образом, 
      фабричный метод делегирует ответственность за создание экземпляров объектов подклассам.
      
      Применяется когда заранее неизвестно, объекты каких типов необходимо создавать.
      Когда система должна быть независимой от процесса создания новых объектов и расширяемой:
      в нее можно легко вводить новые классы, объекты которых система должна создавать.
      Когда создание новых объектов необходимо делегировать из базового класса классам наследникам

Абстрактная фабрика (Abstract Factory)
      Абстрактная фабрика похожа на фабричный метод, но она создает не только один объект, 
      а целую семейство объектов. Она предоставляет интерфейс для создания различных связанных 
      объектов без указания конкретных классов этих объектов. Вместо этого абстрактная фабрика 
      предоставляет набор интерфейсов, каждый из которых может использоваться для создания 
      семейства связанных объектов.
      
      Применяется когда система не должна зависеть от способа создания и компоновки новых объектов
      Когда создаваемые объекты должны использоваться вместе и являются взаимосвязанными

Одиночка (Singleton, Синглтон)
      Одиночка (Singleton, Синглтон) - порождающий паттерн, который гарантирует, что для определенного
      класса будет создан только один объект, а также предоставит к этому объекту точку доступа.

      Применяется когда необходимо, чтобы для класса существовал только один экземпляр

Прототип (Prototype)
      Паттерн Прототип (Prototype) позволяет создавать объекты на основе уже ранее созданных 
      объектов-прототипов. То есть по сути данный паттерн предлагает технику клонирования объектов.

      Применять когда конкретный тип создаваемого объекта должен определяться динамически во время выполнения
      Когда нежелательно создание отдельной иерархии классов фабрик для создания объектов-продуктов 
      из параллельной иерархии классов (как это делается, например, при использовании паттерна Абстрактная фабрика)
      Когда клонирование объекта является более предпочтительным вариантом нежели его создание и инициализация 
      с помощью конструктора. Особенно когда известно, что объект может принимать небольшое ограниченное число возможных состояний.





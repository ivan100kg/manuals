--- 8 часто используемых структур: ----
    Массив (Array)
    Стек (Stack)
    Очередь (Queue)
    Связный список (Linked List)
    Дерево (Tree)
    Граф (Graph)
    Префиксное дерево (Trie)
    Хэш-Таблица (Hash Table)

--- Array/Массив ---
    Массив – это самая простая и наиболее широко используемая из структур. 
    Стеки и очереди являются производными от массивов.
    Каждому из них присваивается неотрицательное числовое значение – индекс, 
    который соответствует позиции этого элемента в массиве. Большинство языков 
    определяют начальный индекс массива как 0.

    Существует два типа массивов:
    Одномерные массивы (как на картинке).
    Многомерные массивы (массивы массивов).

    Основные операции с массивами
    Insert  – вставка.
    Get     – получение элемента.
    Delete  – удаление.
    Size    – получение общего количества элементов в массиве.

    Достоинства
    лёгкость вычисления адреса элемента по его индексу (поскольку элементы
    массива располагаются один за другим)
    одинаковое время доступа ко всем элементам
    малый размер элементов: они состоят только из информационного поля.

    Недостатки
    для статического массива — отсутствие динамики, невозможность удаления 
    или добавления элемента без сдвига других.
    для динамического и/или гетерогенного массива — более низкое (по сравнению
    с обычным статическим) быстродействие и дополнительные накладные расходы 
    на поддержку динамических свойств и/или гетерогенности.
    при работе с массивом в стиле C (с указателями) и при отсутствии 
    дополнительных средств контроля — угроза выхода за границы массива и 
    повреждения данных.

--- Stack/Стеки ---
    LIFO (Last In First Out, последним пришел – первым ушел).
    Пример стека из реальной жизни – куча книг, лежащих друг на друге.
    
    Основные операции со стеками
    Push    – вставка элемента наверх стека.
    Pop     – получение верхнего элемента и его удаление.
    isEmpty – возвращает true, если стек пуст.
    Top     – получение верхнего элемента без удаления.

--- Queue/Очереди ---
    FIFO (First in First Out, первым пришел – первым ушел).
    Пример этих структур в реальной жизни – очереди людей в билетную кассу.

    Основные операции с очередями
    Enqueue – вставка в конец.
    Dequeue –  удаление из начала.
    isEmpty – возвращает true, если очередь пуста.
    Top     – получение первого элемента.

--- LinkedListСвязный список ---
    Связный список – это сеть узлов, каждый из которых содержит данные и 
    указатель на следующий узел в цепочке. Также есть указатель на первый 
    элемент – head. Если список пуст, то он указывает на null.
    Связные списки используются для реализации файловых систем, хэш-таблиц 
    и списков смежности.

    Типы связных списков:
    Однонаправленный
    Двунаправленный

    Основные операции со связными списками
    InsertAtEnd     – вставка в конец.
    InsertAtHead    – вставка в начало.
    Delete          – удаление указанного элемента.
    DeleteAtHead    – удаление первого элемента.
    Search          – получение указанного элемента.
    isEmpty         – возвращает true, если связный список пуст.

--- Графы ---
    Граф представляет собой набор узлов, соединенных друг с другом в виде 
    сети. Узлы также называются вершинами. Пара (x, y) называется ребром, 
    которое указывает, что вершина x соединена с вершиной y. Ребро может 
    содержать вес/стоимость, показывая, сколько затрат требуется, чтобы 
    пройти от x до y.

    Типы графов:
    Неориентированный
    Ориентированный

    В языке программирования графы могут быть представлены в двух формах:
    Матрица смежности
    Список смежности

    Общие алгоритмы обхода графов:
    В ширину
    В глубину

--- Деревья ---
    Дерево – это иерархическая структура данных, состоящая из вершин 
    (узлов) и ребер, соединяющих их. Они похожи на графы, но есть одно 
    важное отличие: в дереве не может быть цикла.
    Деревья широко используются в искусственном интеллекте и сложных 
    алгоритмах для обеспечения эффективного механизма хранения данных.

    Типы деревьев:
    N-арное дерево;
    сбалансированное дерево;
    бинарное дерево;
    бинарное дерево поиска;
    дерево AVL;
    красно-чёрное дерево;
    2-3 дерево.
    
--- Префиксное дерево ---
    Префиксные деревья (tries) – древовидные структуры данных, эффективные 
    для решения задач со строками. Они обеспечивают быстрый поиск и 
    используются преимущественно для поиска слов в словаре, автодополнения 
    в поисковых системах и даже для IP-маршрутизации.

--- Хеш-Таблица ---
    Хеширование – это процесс, используемый для уникальной идентификации 
    объектов и хранения каждого из них в некотором предварительно вычисленном 
    уникальном индексе – ключе. Итак, объект хранится в виде пары 
    ключ-значение, а коллекция таких элементов называется словарем. 
    Каждый объект можно найти с помощью его ключа. Существует несколько 
    структур, основанных на хешировании, но наиболее часто используется 
    хеш-таблица, которая обычно реализуется с помощью массивов.

    Производительность структуры зависит от трех факторов:
    функция хеширования;
    размер хеш-таблицы;(коэф переполнения идеально не больше 0.7)
    метод обработки коллизий.(попадание эл-ов в одну ячейку)
Arduino - это марка выпускающая платы и софт.

Плата Arduino, устройство:
	микроконтроллер - это микросхема, состоит:
		микропроцессор
		интерфейсы ввода/вывода
		память (оперативная, постоянная)
		таймеры
		в основном производитель AVR, серия ATmega
	кварцевый генератор - задает частоту работы процессора
	рассыпуха - конденсаторы, резисторы(фильтрация, подтягивающие ф-ии)
	программатор - загрузка прошивок
	usb порт - питаниу/загрузка скетчей
	стабилизатор питания 5-19В - pin "vin"
	
Прошивка:
	ISP(in-system programming) программатор - загрузка в память напрямую,
		загрузчик не требуется.
	USB-TTL преобразователь(usb - транзистор-транзистор-логика -на плате) -поз
		воляет обмениваться данными через usb, с помощью загрузчика
	bootloader - загрузчик, живет в памяти(6%), ловит данные, грузит во flash
	    память микроконтроллера. При подключении к компу ждет пару секунд
		комманды от компа.

Софт:
	Arduino IDE - редактор, компилятор, все остальное для загрузки прошивки.
	
Порты:
	цифровые - D2-D12  D0(RX0) D1(TX1) D13 - прерывистый сигнал 0v-false 5v-true
	аналоговые - A0-A7 - могут измерять напряжение 0В - 5В, шаг ~ 5 мВ
	и цифровые и аналоговые могут принимать и выдавать цифровой сигнал при
		подключении на землю
	макс сила тока с портов 40 мА
	GND - земля
	RST - ресет на землю
	+5V - подача питания 5V, напряжение относительно земли
	VIN - подача питания 2-20 В
	3V3 - напряжение 3.3 В
	AREF - опорное напряжение ФЦП
	TX  - (передача UART) или порт D0
	RX  - (прием UART) или порт D1	
	ШИМ порты - смотреть спец-ю(D3,D5,D6,D9-D11) - изм длит импульсов 0-255
	прерывания - смотреть спец-ю (D2,D3). Эти пины могут обрабатывыться
		обработчиком прерываний на наличие напряжения на них, выполняется
		параллельно коду, работает всегда и быстро, выводит плату из сна.
	
Подключение устройств к плате:
	AO      - к аналог порту
	DO, OUT - к цифровому порту
	G, GND  - на землю или к шине 5 вольт -
	+, VCC  - к пину 5V или шине 5 вольт
	
Coding===================================================================

COM порт(последовательный(побитовый) порт (usb)):
	Serial - объект биб-ки Serial для работы с последовательным COM портом
	Serial.begin(скорость); -открыть порт, скорость измер в бод, ставим 9600
	Serial.print("Hello"); отправить в порт "Hello" и распечатать
	Serial.println("с переносом строки");
	Данные с компа попадают в буфер с объемом 64 байта и ждут обработки
	Serial.available(); - проверить буфер на наличие входящих данных
	Serial.read(); - прочитать данные в символьном формате
	Serial.parseInt(): - прочитать инт целиком!
	Serial.flush(); - очистить буфер порта
	Serial.flush(); - очистить буфер порта

Временные ф-ии:
	delay(1000); -задержка в миллисекундах макс = 4294967295 = 50 суток
	delayMicroseconds(1); -микросекунды, макс 16383 = 16мс
	millis(); - возвращ кол-во мс прошед с момента вкл МК, 50 сут, разреш 1мс,
		сбрасывается при макс.
	micros(); - тоже но в мкс, макс 70 мин, разрешение 4 мкс.
	
	примеры		
		unsigned long last_time = 0; //переменная для хранения времени
		
		//пример кода задержки на 1 секунд
		if(millis() - last_time > 1000) у
			last_time = millis();
		
		// пример задержки на кажд  2 дня         d h  m  s  ms
		if(millis() - last_time > (unsigned long) 2*24*60*60*1000)
		
		// еще один пример кода на 2 режима
		unsigned long mSec = 1000; // переменная регулировки времени
		// %2 - кол-во интервалов(каждый интервал по mSec секунд)
		if ((millis()/ mSec) % 2 == 0) digitalWrite(pin, HIGH);
		else digitalWrite(pin, LOW);
		
	
Функции:
	map(val, min, max, new_min, new_max); - возвращает величину в новом диап-не
		val - входная величина
		min max - на входе (0, 1023)
		new_min new_max - на выходе (напр 0, 10)
	    constrain(val, min, max); - ограничить диапазон val от min до max,
			в случае случайного выхода диапазона.
 	
Порты:
	-цифровые
	по умолчанию все порты - входы
	pinMode(pin, mode); - настроить порт
			pin - номер порта.
			Цифровые D0-D13:  в прошивке обоз-ся 0 - 13.
			Аналоговые A0-A7: в прошивке обоз-ся 14-19, либо A0-A7.
		mode - режим работы порта.
			INPUT - вход, принимает сигнал
			OUTPUT - выход, выдает 0 или 5В
			INPUT_PULLUP - вход с подтяжкой к 5В(через внутр резистор),
				использ-ся с кнопками
			    GND-кнопка-вход. при нажатии - 0, отпущ- 1.
			
	digitalWrite(pin, signal); - подать цифр сигнал
		pin - пин, куда подаем сигнал
		signal - какой сигнал подаем
			LOW - 0, false, 0v
			HIGH - 1, true, 5v
	digitalRead(pin); - прочитать цифровой сигнал, pin - номер порта.
		true - если есть напряжение, false - если нет сигнала.
		читаемый пин следует соединить резистором 10к с GND или использовать
			INPUT_PULLUP со встроенным резистором.
	
	-аналоговые
	напряжение сравнивается с пином 5v и преобразуется в цифровое значение 0-1023
	потенциометр подключить крайние 5v и GND средний к аналог входу
	analogRead(pin); - возврвщает 0..1023 в завис-ти от напряж на пине от нуля до
		опорного напряжения(грубо 5В)
	analogWrite(pin, значение); - выдает на аналоговые выходы ШИМ сигнал
		ШИМ сигнал - прямоуг импульсы с регулируемой длительностью
		pin - пин, на который пойдет ШИМ
		значение от 0-255 -соответствует скважности ШИМ от 0 - 100 %
	
	-прерывания 
	порты D2 - 0, D3 - 1.
	attachInterrupt(pin, func, mode); -подключить прерывание
		pin - 0 или 1 - всего 2 порта на nano D2 и D3, настраиваем pin на вход,
			подводим к земле через резистор или INPUT_PULLUP без резистора.
		func - своя ф-ия (временные функции внутри не действуют!)
			если используются переменные то тип нуже volotile
		mode - режим работы:
			LOW - срабатывает когда на пине 0
			RISING - срабат когда сигнал меняется с LOW на HIGH
			FALLING - срабат когда сигнал меняется с HIGH на LOW
			CHANGE - срабат когда происх 3 изменения
		noInterraps(); - приостановить обраб прерываний
		interrups(); продолжить обработку прерываний
	detachInterrupt(pin); отключить прерывание
	
	--------- new -------------
	
	
# Arduino – это марка, выпускающая платы и софт (Arduino IDE).

# Устройство платы Arduino
# ----------------------------

# Микроконтроллер (сердце платы) — это микросхема, внутри которой:
#  - микропроцессор (ядро)
#  - интерфейсы ввода/вывода (порты I/O)
#  - память: RAM (оперативная), EEPROM/Flash (постоянная)
#  - таймеры, ШИМ-модули, UART, SPI, I2C и т.д.
#  - чаще всего — AVR (Atmel ATmega328P на Nano/Uno)
# Кварцевый генератор – задаёт частоту работы микроконтроллера (например, 16 МГц)
# Рассыпуха – конденсаторы, резисторы (фильтрация, подтяжка)
# Программатор/загрузчик – отвечает за прошивку (bootloader)
# USB-порт – питание + обмен данными/загрузка скетча
# Стабилизатор питания – стабилизирует 5В/3.3В с внешнего источника (через VIN)

# Прошивка и загрузка
# -------------------

# ISP (In-System Programming) — прошивка напрямую в память, загрузчик не нужен
# USB-TTL преобразователь (на плате, через CH340/FT232) – обеспечивает обмен с ПК через COM-порт
# Bootloader – загрузчик в flash-памяти (~0.5–2 КБ), перехватывает скетч при старте

# Софт
# -----
# Arduino IDE – редактор кода + компилятор + загрузка + монитор порта
# Пишем на C++ (упрощённый), компиляция в hex-файл → загрузка в контроллер

# Питание и порты
# -----------------

# Пины платы и их назначение
# ---------------------------
# | Пин     | Назначение          |
# |---------|---------------------|
# | VIN     | Подача от 6–20В     |
# | +5V/3V3 | Напряжение питания для внешних устройств |
# | GND     | Земля               |
# | AREF    | Опорное напряжение для ADC |
# | RST     | Сброс микроконтроллера |
# | TX (D1) | UART-передача       |
# | RX (D0) | UART-приём          |
# | D2-D13  | Цифровые I/O        |
# | A0-A7   | Аналоговые входы (на Nano: A6 и A7 — только входы) |

# Подключение устройств
# ---------------------
# | Обозначение | Куда подключать      |
# |-------------|----------------------|
# | AO          | К аналоговому входу   |
# | DO / OUT    | К цифровому порту     |
# | G / GND     | К земле               |
# | + / VCC     | К +5V / 3.3V         |

# Работа с портами
# ----------------
# Цифровые порты
pinMode(13, OUTPUT)     # Настроить D13 как выход
digitalWrite(13, HIGH)  # Подать 5В
digitalRead(2)          # Прочитать лог. сигнал с D2

# INPUT_PULLUP — подтягивает вход к 5В (удобно для кнопок)

# Аналоговые порты
analogRead(A0)          # Возвращает 0–1023
analogWrite(3, 128)     # PWM (на D3, D5, D6, D9–D11)

# PWM = скважность сигнала от 0 (0%) до 255 (100%)

# Временные функции
# ------------------
delay(1000)              # Пауза 1 сек
millis()                 # Время с запуска, мс
micros()                 # Время в микросекундах

# Пример таймера:
unsigned long last = 0;
if (millis() - last > 2000) {
    last = millis();
    # действие каждую секунду
}

# Serial (COM-порт)
# -------------------
Serial.begin(9600)      # Инициализация
Serial.print("Hi")      # Печать в COM
Serial.println("End")   # С новой строки
Serial.read()           # Прочитать символ
Serial.available()      # Проверить наличие входных данных

# Буфер на приём: 64 байта.
# Скорость — в бодах: 9600, 115200 и т.п.

# Прерывания
# -----------
attachInterrupt(digitalPinToInterrupt(2), func, RISING)  # Прерывание по подъёму

# Параметр  | Значение
# --------- | --------
# LOW      | Постоянно при LOW
# CHANGE   | Любое изменение
# RISING   | LOW → HIGH
# FALLING  | HIGH → LOW

# Функция func должна быть быстрой и без delay()
# Используй volatile для переменных, изменяемых в прерывании

detachInterrupt(digitalPinToInterrupt(2))  # Отключить
noInterrupts()                             # Отключить все прерывания
interrupts()                               # Включить

# Полезные функции
# -----------------
map(x, 0, 1023, 0, 10)        # Преобразовать диапазон
constrain(x, 0, 255)          # Ограничить значение
	
	
	

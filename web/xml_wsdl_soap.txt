--- XML ---
    XML (eXtensible Markup Language) - расширяемый язык разметки,
    позволяет определять и хранить данные совместно используемым способом

    <!-- This is a comment -->

    Элементы:
    Элеменнт - это все между и включая откр и закр тэг

    Тэги:
    Имена тэгов определяются пользователем, регистрозависимы
    <имя_тэга></имя_тэга>   - открывающиеся/закрывающиеся 
    </одиночный_тэг>        - просто одиночный тэг

    Аттрибут:
    Располагаются внутри тэга: имя_аттр="значение_аттр"
    <имя_тэга at="1">       - один аттрибут
    <тэг at1="1" at2="2">   - много аттр через пробел

    Значение:
    Располагаются между откр и закр тэгами - без кавычек
    <tag>her</tag>          - строка, без кавычек
    <tag>100</tag>          - целочисленное
    <date>2015-09-01</date> - дата
    <hour>08:30</hour>      - время

    Вложенные элементы:
    <root>                                              - корневой элем
        <name attr1="some" attr2="1100">Ivan B</name>   - влож элем с аттрибутами
        <age>18</age>                                   - влож элем со значением число
    </root>

    Префиксы(пространства имен):
        Допустим в документе есть две таблицы с разным набором элементов,
        чтобы не возникало конфликтов можно их обозначить доп префиксом.
        Чтобы использовать этот префикс нужно его определить в коде с пом аттрибута:
        xmlns - xml namespace, xmlns:prefix_name="URI" - вот таким спопсобом
        example:
            <root>
            <h:table xmlns:h="http://www.w3.org/TR/html4/">
                <h:tr>
                    <h:td>Apples</h:td>
                    <h:td>Bananas</h:td>
                </h:tr>
            </h:table>

            <f:table xmlns:f="https://www.w3schools.com/furniture">
                <f:name>African Coffee Table</f:name>
                <f:width>80</f:width>
                <f:length>120</f:length>
            </f:table>
            </root>

    Пролог(опционально):
    первая строка в документе
    версия XML, которая используется в документе, а также кодировка
    <?xml version="1.0" encoding="UTF-8"?>


--- XSD-схема (XML Schema Definition) ---
    Описание XML. Как он должен выглядеть, что в нем должно быть?
    Это ТЗ, написанное в формате XML
    проверку по схеме можно делегировать машине

    Элемент схемы:
    <xs:element name="age" type="xs:integer"/>                  - простой элемент, имя, тип
    <xs:element name="color" type="xs:string" default="red"/>   - знач по умолчанию
    <xs:element name="color" type="xs:string" fixed="red"/>     - предустановленное значение
    XML:
    <lastname>Refsnes</lastname>
    <age>36</age>
    <dateborn>1970-03-27</dateborn>

    Составной/Comlex element:
    <xs:element name="employee">                                - complex el
        <xs:complexType>                                        - тип
            <xs:sequence>
                <xs:element name="firstname" type="xs:string"/> - simple el
                <xs:element name="lastname" type="xs:string"/>  - simple el
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    Второй способ:
    <xs:element name="employee" type="personinfo"/>             - complex el
    <xs:complexType name="personinfo">                          - тип
        <xs:sequence>
            <xs:element name="firstname" type="xs:string"/>
            <xs:element name="lastname" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    Аттрибут схемы:
    <xs:attribute name="lang" type="xs:string"/>                - аттрибут, может исп в элем
    <xs:attribute name="lang" type="xs:string" default="EN"/>   - знач по умолчанию
    <xs:attribute name="lang" type="xs:string" fixed="EN"/>     - предустановленное значение
    <xs:attribute name="lang" type="xs:string" use="required"/> - делаем обязательным,
    XML:                                                          (по умолчанию не обяз)  
    <lastname lang="EN">Smith</lastname>

    Типы данных:
        xs:string
        xs:decimal
        xs:integer
        xs:boolean
        xs:date
        xs:time
        xs:myOwnType    - свой тип данных(класс)

    Ограничения значений элементов:
    <xs:element name="age">                     - элем
        <xs:simpleType>                         - ограничение
            <xs:restriction base="xs:integer">  - целое
                <xs:minInclusive value="0"/>    - мин
                <xs:maxInclusive value="120"/>  - макс
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    либо такой синтаксис, сначала опред элемент, потом restriction
    <xs:element name="email" type="trueMail">   - элем
    <xs:simpleType name="trueMail">             - ограничение
        <xs:restriction base="xs:string">       - строка
            <xs:pattern value="@[A-Z][A-Z]"/>   - regex
        </xs:restriction>
    </xs:simpleType>

    Пустой элемент:
    <product prodid="1345" />
    определение:
    <xs:element name="product">
        <xs:complexType>
            <xs:attribute name="prodid" type="xs:positiveInteger"/>
        </xs:complexType>
    </xs:element>

    Индикаторы:
        Индикаторы связанные с порядком очереди:
            all                                     - все доч элем встреч 1 раз в люб порядке
            choice                                  - может встреч либо один доч эл, либо другой
            sequence                                - доч элементы в определенном порядке
        Индикаторы встречаемости:
            maxOccurs                               - default=1, maxOccurs="unbounded" - бесчисл
            minOccurs                               - default=1
        Индикаторы групп:
            group
            attributeGroup

    <xs:element name="person">
    <xs:complexType>
        <xs:sequence>
            <xs:element name="full_name" type="xs:string"/>
            <xs:element name="child_name" type="xs:string"
            maxOccurs="10" minOccurs="0"/>          - 0 <= child_name <= 10 
        </xs:sequence>
    </xs:complexType>
    </xs:element>

    Оределение SOAP метода в схеме:
    Указываем:
        какие поля будут в запросе;
        какие поля будут в ответе;
        какие типы данных у каждого поля;
        какие поля обязательны для заполнения, а какие нет;
        есть ли у поля значение по умолчанию, и какое оно;
        есть ли у поля ограничение по длине;
        есть ли у поля другие параметры;
        какая у запроса структура по вложенности элементов;
        ...
    Пример схемы:
    <?xml version="1.0"?>
    <xs:schema                                                  - корневой эл схемы
    xmlns:xs="http://www.w3.org/2001/XMLSchema"                 - подключить пространство имен xs
    targetNamespace="https://www.w3schools.com"                 - эл, опред этой схемой, взяты из URI (пр имен)
    xmlns="https://www.w3schools.com"                           - пространство имен по умолчанию
    elementFormDefault="qualified">                             - соотв требованиям пространства имен
    <xs:element name="note">                                    - элемент пространства имен xs
        <xs:complexType>                                        - составной тип(xs)
            <xs:sequence>                                       - послед-сть элем(xs)
                <xs:element name="to" type="xs:string"/>        - элементы с типами(xs)
                <xs:element name="from" type="xs:string"/>
                <xs:element name="heading" type="xs:string"/>
                <xs:element name="body" type="xs:string"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    </xs:schema>

    Пример xml файла по такой схеме:
    <?xml version="1.0"?>
    <note
    xmlns="https://www.w3schools.com"                           - объявление пространства имен по умолчанию
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       - подключить пространство имен xsi
    xsi:schemaLocation="https://www.w3schools.com/xml note.xsd">- пространство имен, путь схемы
        <to>Tove</to>
        <from>Jani</from>
        <heading>Reminder</heading>
        <body>Don't forget me this weekend!</body>
    </note>


--- XML WSDL ---
    WSDL - Web Services Description Language.
    WSDL Document используется для описания API веб сервиса, пишется на XML
    Методы сервиса используют основные элементы:
        <types>	    Defines the (XML Schema) data types used by the web service
        <message>	Определяет элементы данных для каждой операции
        <portType>	Описывает операции, которые могут быть выполнены, и соответствующие сообщения.
        <binding>	Defines the protocol and data format for each port type

    Структура:
    <definitions>
        <types>
            определение типов данных - опред вида отправляемых и получаемых сервисом XML-сообщений
        </types>
        <message>
            элементы данных - сообщения, используемые web-сервисом
        </message>
        <portType>
            абстрактные операции - список операций, которые могут быть выполнены с сообщениями
        </portType>
        <binding>
            связывание сервисов - способ, которым сообщение будет доставлено
        </binding>
    </definitions>

    <message name="getTermRequest">  <-----------------------------------+
        <part name="term" type="xs:string"/>    - части сообщения        |
    </message>                                                           |
                                                                         |
    <message name="getTermResponse">  <------------------------------+   |
        <part name="value" type="xs:string"/>   - части сообщения    |   |
    </message>                                                       |   |
                                                                     |   |
    <portType name="glossaryTerms">             - имя порта          |   |
    <operation name="getTerm">                  - операция           |   |
        <input message="getTermRequest"/>       - входное сообщение -+   |
        <output message="getTermResponse"/>     - выходное сообщение ----+
    </operation>
    </portType>


--- SOAP ---
    SOAP - Simple Object Access Protocol (простой протокол доступа к объектам)
    Это протокол, по которому веб-сервисы взаимодействуют друг с другом или с клиентами
    SOAP API - веб-сервис, использующий протокол SOAP для обмена сообщениями между 
    серверами и клиентами. 
    Cообщения - это xml документы написанные по определенным правилам
    Сообщения SOAP обычно передаются через протоколы HTTP, HTTPS, SMTP и другие

    SOAP-сообщение(xml file) состоит из нескольких структурных элементов:
        Envelope    - корневой элемент. Определяет XML-документ как сообщение SOAP с пом
                      прос-ва имен xmlns_soap="http://www.w3.org/2003/05/soap-envelope/"
        Header      - атрибуты сообщения, связанные с конкретным приложением 
                      (аутентификация, проведение платежей и тд). В заголовке могут 
                      использоваться три атрибута, которые указывают, как принимающая 
                      сторона должна обрабатывать сообщение:
                        mustUnderstand  - обязательный или опциональный(0 1) заголовок
                        actor           - конкретная конечная точка для сообщения
                        encodingStyle   - устанавливает специфическую кодировку для элем
                      example:
                      <soap:Header>
                          <m:Trans xmlns:m="https://www.w3schools.com/transaction/"
                              soap:mustUnderstand="1">234
                          </m:Trans>
                      </soap:Header>
        Body        - сообщение, которое передает веб-приложение. Может содержать запрос
                      к серверу или ответ от него
        Fault       - оциональный элемент. Передает уведомление об ошибках, если они 
                      возникли в ходе обработки сообщения. Может содержать вложенные 
                      элементы, которые проясняют причину возникновения ошибки:
                        faultcode   - код неполадки
                        faultstring - человекопонятное описание проблемы
                        faultactor  - инфо о программном компоненте, кот вызвал ошибку
                        detail      - доп сведения о месте возникновения неполадки

    Основные характеристики протокола SOAP:
    Формат сообщений:           XML-документы, содержат информацию о вызове метода 
                                или возвращаемом результате. Сообщения SOAP могут быть простыми
                                (содержащими только значения) или сложными (содержащими вложенные
                                элементы и структуры данных)
    Протокол взаимодействия:    SOAP определяет правила взаимодействия между клиентом и веб-службой.
                                Он определяет элементы, такие как заголовок (header) для передачи 
                                метаданных, тело (body) для передачи фактических данных и ошибки 
                                (fault) для обработки ошибок
    Отправка и получ сообщений: HTTP и HTTPS являются наиболее распр протоколами передачи сообщений
                                SOAP, но также существуют другие протоколы, такие как SMTP (для 
                                отправки SOAP-сообщений по эл почте) или JMS (Java Message Service)
    Определение службы:         С помощью WSDL (Web Services Description Language) определяется 
                                интерфейс веб-службы SOAP. WSDL описывает методы, параметры, типы 
                                данных и другую информацию, необходимую для взаимодействия с веб-службой
                                WSDL-документ позволяет клиентам узнать, какие методы и операции доступны
                                в веб-службе SOAP
    Адресация:                  Веб-службы SOAP могут быть адресованы с пом URI (Uniform Resource Identifier)
                                Клиенты могут использовать URI для обращения к конкретной веб-службе SOAP и 
                                вызова ее методов.

    Пример запроса на сервер:
    <?xml version="1.0"?>
    <soap:Envelope xmlns_soap="http://www.w3.org/2003/05/soap-envelope/" soap_encodingStyle="http://www.w3.org/2003/05/soap-encoding">
        <soap:Body>
            <m:GetPrice xmlns_m="https://online-shop.ru/prices">
                <m:Item>Dell Vostro 3515-5371</m:Item>
            </m:GetPrice>
        </soap:Body>
    </soap:Envelope>

    Пример ответа сервера:
    <?xml version="1.0"?>
    <soap:Envelope xmlns_soap="http://www.w3.org/2003/05/soap-envelope/" soap_encodingStyle="http://www.w3.org/2003/05/soap-encoding">
        <soap:Body> 
            <m:GetPriceResponse xmlns_m="https://online-shop.ru/prices">
                <m:Price>37299</m:Price>
            </m:GetPriceResponse>
        </soap:Body>
    </soap:Envelope>
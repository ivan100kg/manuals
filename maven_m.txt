# Maven

Описание
    Maven - framework для автоматизации сборки проектов.
    Позволяеет генерировать каркас проекта.
    Управляет зависимостями как внутри проекта, так и импорта сторонних
    библиотек из огромного репозитория.

Structure of Project:
    Create a Project:
    mvn archetype:generate [n]  // generate the project, n - вид каркаса
                                   оставляем по умолчанию без параметров.
        groupId     // название организации  - io.github.ivan100kg
        artifactId  // уник название проекта - myProject
        version     // оставляем по умолч    - 1.0-SNAPSHOT (SNAPSHOT - в разраб)
    
    Структура of Default Project archetype, плюс создали директории resources:
        my-app
        ├── pom.xml                             // pom.xml file
        └── src
            ├── main
            │   ├── java                        // sourses rooot
            │   │   └── io
            │   │       └── github
            │   │           └── ivan100kg       // your classes
            │   │               └── App.java
            │   └── resources                   // resources root
            └── test
                ├── java                        // sourse dir for tests
                │   └── io
                │       └── github
                │           └── ivan100kg       // tests sourses root
                │               └── AppTest.java
                └── resources                   // resources for your tests
    
Project Object Model:
    pom.xml -       детальное описание проекта, инфо о различных свойствах,
                    настройка сборки(плагины, цели, профили), наследуемость.
                    Наследуется от Parent pom и переопределяет разл. настройки.
                    Указано лишь то что переопределяется. (размер малый)

    Parent POM -    родительский для всех pom.xml, аналог Object Java.
                    Содержит все настройки по умолчанию. (размер средний)

    effectiv-pom -  огромный размер, все зависимости всех зависимостей расписаны

    // pom.xml
    <?xml version="1.0" encoding="UTF-8"?>                  
    <project xmlns="http://maven.apache.org/POM/4.0.0"      
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>io.github.ivan100kg</groupId>
        <artifactId>myProject</artifactId>
        <version>1.0-SNAPSHOT</version>

        <name>my-app</name>
        <url>http://www.example.com</url>

        <properties>    // свойства
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.7</maven.compiler.source>
            <maven.compiler.target>1.7</maven.compiler.target>
        </properties>

        <dependencies>  // зависимости 
            <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
            </dependency>
        </dependencies>
        
        <build>         // плагины
            <pluginManagement><!-- lock down plugins versions to avoid using 
            Maven defaults (may be moved to parent pom) -->
            ... lots of helpful plugins
            </pluginManagement>
        </build>
    </project> 
    
    <?xml>          - тэг xml, тип документа
    <project>       - главный тэг для всех, аттрибуты - всякие правила для xml
    <modelVersion>  - версия POM, не меняется после создания
    <groupId>       - название организации - io.github.ivan100kg
    <artifactId>    - уник название проекта - myProject
    <version>       - номер нашей версии проекта - 5.0-RELEASE

    project         - the top-level element in all Maven pom.xml files.
    modelVersion    - version of the object model this POM is using. 
    groupId         - the unique identifier of the organization or group.
    artifactId      - the unique base name of the primary artifact.
    version         - version of the artifact generated by the project.
    name            - the display name used for the project.
    url             - where the project's site can be found.
    properties      - contains value placeholders accessible anywhere within a POM.
    dependencies    - children list dependencies. The cornerstone of the POM.
    build           - your project's directory structure and managing plugins.

Commands:
    mvn archetype:generate  - create a project with pom.xml
    mvn compile             - compile applications, download all the plugins
                              and related dependencies. 
                              target/ - dir with compiled classes.
    mvn test                - compile Test classes and run tests       
    mvn test-compile        - compile your test sources without running after
    mvn package             - make a JAR file
    mvn install             - install artifact(JAR) in your local repository 
    mvn site                - create javadoc for your project
    mvn clean               - remove the target dir with all the build data
    mvn process-resources
    mvn verify